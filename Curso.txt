Curso de Laravel 5.5 com Vue JS - Duas Seções 

  Seção 01 - 63 Aulas
  Seção 02 - 02 Aulas (Bonus)


Toda Vez que Iniciar o Curso Faça Se já fez as aulas 02 e 03 digite os comandos abaixo. Senão Leia as aulas

     - Propmt de comando, vá na pasta blog e digite [php artisan serve] (start do servidor Php)
     - Abrir o browser e digitar localhost:8000
     - Abrir outro prompt e na pasta blog digitar [npm run watch]
      
  
Atenção:  SEQUENCIA DE COMANDOS A SEREM DADOS CASO A APLICAÇÃO FIQUE DESCONTROLADA. (Retorna ao Inicio)
          01) Apague a pasta [Blog]. Se achar que deve salva-la compacte-a
          02) Pegue uma Aula que você queira Baixar (Nesse caso eu peguei a 65 , a última)
          03) Descompactei a pasta 65 e copiei tudo que está na pasta blog do 65 para a minha pasta blog.
          04) Apaguei o arquivo [package-lock.json]. Apague a pasta [node_modules] se existir e Altere o conteudo do arquivo
              [package.json] para o apresentado abaixo:

                     {
                         "private": true,
                         "scripts": {
                             "dev": "npm run development",
                             "development": "cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js",
                             "watch": "cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js",
                             "watch-poll": "npm run watch -- --watch-poll",
                             "hot": "cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js",
                             "prod": "npm run production",
                             "production": "cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js"
                         },
                         "devDependencies": {
                             "axios": "^0.16.2",
                             "bootstrap-sass": "^3.3.7",
                             "cross-env": "^5.0.1",
                             "jquery": "^3.1.1",
                             "laravel-mix": "^1.0",
                             "lodash": "^4.17.4",
                             "vue": "^2.5.16",
                             "vuex": "^3.0.1"
                         },
                         "dependencies": {
                             "ajv": "^6.12.6",
                             "ajv-keywords": "^3.5.2",
                             "ckeditor": "^4.10.0",
                             "vue-ckeditor2": "^1.18.0"
                         }
                     }

          05) Depois digite o comando [composer update] e tudos deve voltar a funcionar.
          06) Agora se você quiser fazer alterações no projeto e precisa manipular com VUE e JavaScript deve digitar o comando [npm install]
          07) Digite [npm ls] e veja se aparece alguma mensagem
          08) Teste a aplicação. Se der erro no Ckeditor veja na listagem do [npm ls] se está em uma versão diferente
          09) Se estiver desinstale com [npm un vue-ckeditor2@1.26.0 ] e instale [npm in vue-ckeditor2@1.18.0 ]
          10) Agora funcionou.
          11) Atenção: Só fiz até a aula 054) Porque esta dando muito erro. Como esse curso é para sempre posso voltar e continuar



        <ckeditor
          id="addConteudo"
          name="conteudo"
          value="{{old('conteudo')}}"
          v-bind:config="{
                    toolbar: [
                      [ 'Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript' ]
                    ],
                    height: 200
                  }" >
        </ckeditor>



        <ckeditor
          id="editConteudo"
          name="conteudo"
          v-model="$store.state.item.conteudo"
          v-bind:config="{
                    toolbar: [
                      [ 'Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript' ]
                    ],
                    height: 200
                  }" >
        </ckeditor>





Aulas 

  01) Introdução ao Curso

     - Não tem arquivo de recursos (fornecido nesta aula)
     - Laravel 5.5   www.laravel.com
     - Criar componentes usando o VueJS
     - O Laravel utiliza o BootStrap 3
     - Vamos usar componentes do BootStrap trabalhando com VueJS
     - Os Componentes "Caixa" usados na App foram obtidos em AdminLTE  adminlte.io (Ele foi no site e copiou o Html e o CSS, os Icones são do Ionic)

 02) Criando um projeto com Laravel

     - Arquivo de recursos 002.zip
     - o Arquivo Dicas.txt possue diversas informações e comandos usados no curso (alguns comandos vão estar replicados aqui)
     - Acredito que tenha um arquivo de Dicas.txt para cada Aula.
     - Documentação do Laravel https://laravel.com/docs/5.5
     - A Instlação do Laravel será feita utilizando o comando Composer
     - O Composer é um gerenciador de Dependencia para o PHP (identico ao Maven no Java) Pode ser obtido em https://getcomposer.org/
     - Composer utilizado no Curso 1.4.2 o meu 1.9.1 (para saber basta abrir o prompt de comandos e digitar composer. Já deve ter instalado antes)
     - Para usar o Laravel 5.5 você precisa de PHP 7.0 ou superior. No meu caso o meu PHP é 7.4.6 (digite no prompt php -v Já tinha instalado antes)
     - O Laravel vai usar o servidor do PHP
     - [composer create-project --prefer-dist laravel/laravel blog "5.5.*"] Este comando digitado no prompt faz com que um projeto/pasta chamado blog seja
       criado usando todas as bibliotecas do laravel 5.5.* onde o * representa a última versão dentro da 5.5
     - A pasta blog dentro da pasta 002 ja foi baixada assim dos recursos da aula. A pasta blog dentro da pasta CursoLaravel foi criada pelo comando acima 
     - Agora vamos na pasta blog e startamos o servidor php com o comando [php artisan serve]
     - Após startar o servidor podemos ir no browser e digitar [localhost:8000] abrindo a pagina do laravel
     - Precisamos agora fazer algumas configurações de Banco e ativar o Login do laravel.
     - No arquivo [.env] dentro da pasta blog faremos modificações no Banco de Dados. Vamos retirar as seguintes linhas:
           DB_DATABASE=homestead
           DB_USERNAME=homestead
           DB_PASSWORD=secret
       Estas linhas se referem ao banco Mysql (como no curso usam o SqLite elas não são necessárias)
     - Continuando no arquivo [.env] vamos fazer uma substituição para indicar que vamos usar o sqlite. Pegamos a linha
           DB_CONNECTION=mysql             e trocamos para         DB_CONNECTION=sqlite
     - Agora vamos na pasta config e lá encontramos o arquivo database.php. Esse arquivo contém os parâmetros para todos os tipos de conexão.
       Como em [.env] escolhemos sqlite então ele vai usar essa configuração do sqlite. Lá indica que o arquivo [database.sqlite] deve ser criado por você
       na pasta database. Esse arquivo vai guardar todas as tabelas da aplicação. Se você não criar o arquivo vazio vai dar erro no comando [php artisan migrate]
       logo abaixo
     - Para usar sqlite o php deve estar instalado com essa extensão (também usaremos a extensão PDO) (Nesse pto não sei se as extensões estão instaladas)
     - Agora vamos ativar o sistema de Login do Laravel com o comando: [php artisan make:auth] Esse comando apenas coloca o sistema de login do Laravel.
       Deve ter uma forma de configura-lo (mudar o idioma por exemplo). Ainda não vai funcionar pq não criamos as tabelas referentes a Login.
     - Após criar o sistema de login precisamos criar as tabelas que vão armazenar os dados do Login. Criamos as tabelas com o comando: [php artisan migrate]
     - Atenção: Toda vez que você faz alterações no arquivo .env você deve dar um re-start no servidor para que as modificações possam ser carregadas.
     - Usando a aplicação criamos o usuário [admin] email [admin@mail.com] senha [123456]

 03) Ativando o Vue JS no Laravel

     - Os componentes do Vue JS ficam na pasta resources. Dentro existe a pasta assets e dentro tem js e sass. Dentro de js colocaremos os nossos componentes e
       dentro da pasta sass os css.
     - Dentro da pasta js o Laravel já coloca um componente de exêmplo na pasta components. O nome do arquivo é [ExampleComponent.vue]
     - Atenção: Este componente já esta compilado então já pode ser usado na tela. 
     - Na pasta public tem uma pasta js e nesta pasta existe o arquivo [app.js]. Esse arquivo já foi gerado (compilado) com o componente que vimos na pasta de
       resources\assets\js\components [ExampleComponent.vue] então já podemos usar. Se fizermos alguma alteração no arquivo temos que compilá-lo novamente.
     - Na pasta views dentro da pasta resources existe o arquivo [home.blade.php]. Podemos usar o componente neste arquivo.
     - No arquivo home.blade.php eu retirei todas as linhas abaixo:

           <div class="container">
              <div class="row">
                 <div class="col-md-8 col-md-offset-2">
                    <div class="panel panel-default">
                       <div class="panel-heading">Dashboard
                       </div>

                       <div class="panel-body">
                          @if (session('status'))
                             <div class="alert alert-success">
                                {{ session('status') }}
                             </div>
                          @endif

                          You are logged in!
                       </div>
                    </div>
                 </div>
              </div>
           </div>

       Ficando apenas:

           @extends('layouts.app')

           @section('content')
           @endsection

       Ai colocamos:

       Para saber o que vamos colocar temos que ver como o componente foi registrado. Para isso vamos na pasta: resources\assets\js lá tem o arquivo [app.js] e nesse
       arquivo temos o comando que registra o componente. O comando é esse: 
       
              Vue.component('example-component', require('./components/ExampleComponent.vue'));

       Então teremos que usar:

              <example-component></example-component>


       Então o arquivo [home.blade.php] fica assim:

           @extends('layouts.app')

           @section('content')
              <example-component></example-component>
           @endsection

       Após dar um F5 podemos ver a atuação do componente no Browser.

       Se alteramos o componente e damos um F5 nada acontece. Porque? 

       Porque ainda não temos o Node.js (ativado) rodando com o sistema. O Node vai pegar o componente, compilar e jogar na pasta public\js no arquivo app.js 
       para que assim ele posa ser usado na sua versão mais recente.

       Para trabalhar com o VueJS eu preciso ativar o NodeJS na minha aplicação.

       Para ativar o NodeJS eu vou no prompt na pasta blog e digito [npm install] ou [npm i]
       Após baixar todas as dependências do NodeJS foi criada uma pasta [nodes_modules]. Neste momento tanto o VueJS como o NodeJS estão disponíveis para uso.

       Vamos voltar o arquivo [home.blade.php] ao estado original. 

     - No arquivo package.json (arquivo de configuração do Node) está a configuração de todas as depndências (ou seja todos os pacotes usados na app). 
       Tem também um conjunto de comandos (scripts) que podem ser digitados no prompt.
       Um deses comandos vai carregar o servidor e compilar todos os seus componentes. O Comando é [npm run dev]. No caso [dev] é o nome dado ao script [npm run development] 
       Ao executar esse comando tudo é compilado e uma janela informa que a compilação foi ok.
       Só que esse comando deve ser rodado para cada alteração de componente que você faça. Então temos o comando que observa qualquer alteração feita e ja faz
       a compilação. [npm run watch] observe que [watch] é o nome do script para um comando com um monte de parâmetros. Esse comando não compila e acaba. Ele fica 
       rodando o tempo todo (na sua janela de prompt) a espera de uma alteração e logo em seguida ele ja faz a compilação.


04) Criando o Componente Topo

     - Vamos pegar o Topo que já vem na tela do Laravel e transformá-lo em um componente para uso geral. 
     - Para criar um componente devemos colocar um arquivo com a extensão .vue na resources\assets\js\components
     - Como vamos criar um componente para o Topo vamos chamar de Topo.vue
     - Copiando o arquivo de Exemplo que já existia nessa pasta vamos então apagar algumas linhas:

                <template>
                    <div class="container">
                        <div class="row">
                            <div class="col-md-8 col-md-offset-2">
                                <div class="panel panel-default">
                                    <div class="panel-heading">Example Component</div>

                                    <div class="panel-body">
                                        I'm an example component!
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </template>

                <script>
                    export default {
                        mounted() {
                            console.log('Component mounted.')
                        }
                    }
                </script>


       Apagamos tudo entre as tags <template></template> (Neste espaço é onde reside o componente) e vamos apagar o método mounted() 
       (ele faz parte do ciclo de vida do componente)
       

                <template>
                </template>

                <script>
                    export default {
                    }
                </script>

     - Agora vamos analisar o arquivo [app.blade.php] que está na pasta [resources\views\layouts]. Esse arquivo possui a estrutura do Topo do Laravel
       A parte que desejamos copiar do arquivo segue abaixo: (ou seja é toda essa NAV BAR representada pela Tag <nav></nav>

         /* Linha 18 do Arquivo app.blade.php */
         <nav class="navbar navbar-default navbar-static-top">
            <div class="container">
                <div class="navbar-header">

                    <!-- Collapsed Hamburger -->
                    <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#app-navbar-collapse" aria-expanded="false">
                        <span class="sr-only">Toggle Navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>

                    <!-- Branding Image -->
                    <a class="navbar-brand" href="{{ url('/') }}">
                        {{ config('app.name', 'Laravel') }}
                    </a>
                </div>

                <div class="collapse navbar-collapse" id="app-navbar-collapse">
                    <!-- Left Side Of Navbar -->
                    <ul class="nav navbar-nav">
                        &nbsp;
                    </ul>

                    <!-- Right Side Of Navbar -->
                    <ul class="nav navbar-nav navbar-right">
                        <!-- Authentication Links -->
                        @guest
                            <li><a href="{{ route('login') }}">Login</a></li>
                            <li><a href="{{ route('register') }}">Register</a></li>
                        @else
                            <li class="dropdown">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false" aria-haspopup="true" v-pre>
                                    {{ Auth::user()->name }} <span class="caret"></span>
                                </a>

                                <ul class="dropdown-menu">
                                    <li>
                                        <a href="{{ route('logout') }}"
                                            onclick="event.preventDefault();
                                                     document.getElementById('logout-form').submit();">
                                            Logout
                                        </a>

                                        <form id="logout-form" action="{{ route('logout') }}" method="POST" style="display: none;">
                                            {{ csrf_field() }}
                                        </form>
                                    </li>
                                </ul>
                            </li>
                        @endguest
                    </ul>
                </div>
            </div>
        </nav>

     - Agora vamos copiar esse <nav> para dentro do arquivo Topo.vue (dentro da tag <template>
     - Agora em Topo.vue vamos ver o que podemos transformar em parâmetros para que esse componente possa ser usado em diferentes ocasiões.

     - Primeiro parâmetro é o logo (ou seja aquele nome Laravel)
        {{ config('app.name', 'Laravel') }} Para construir o parâmetro vamos usar [props}

     - O Segundo é a URL para onde vamos quando clicamos sobre o nome Laravel
        href="{{ url('/') }}

     - Para criar props digitamos [props] na part do <script> (em topo.vue)

         <script>
            export default {
                 props: ['titulo','url'] 
            }
         </script>

     - Nesse caso props é um array que guarda duas referências
     - Agora em topo.vue eu vou pegar {{ config('app.name', 'Laravel') }} e substituir por {{ titulo }} titulo está la em props e as {{ }} servem no vuejs como
       comando de interpolação.
       
     - No caso da Url não podemos fazer href="{{ url('/') }}" por href="url" pois ele vai considerar isso uma string então temos que fazer:
       v-bind:href="url" agora ele não vai considerar a "url" como uma String e sim como uma varável (ou seja uma varável de props)
       o [v-bind:] pode ser substituido apenas pelos [:] dá no mesmo. Melhor escrever v-bind pois fica mais detalhado. 

     - Continuando a parametrização vamos tirar todos os links (login e register) pois desejamos que esses links sejam dinâmicos.
       Então vamos apagar todas as linhas abaixo:


                        <!-- Authentication Links -->
                        @guest
                            <li><a href="{{ route('login') }}">Login</a></li>
                            <li><a href="{{ route('register') }}">Register</a></li>
                        @else
                            <li class="dropdown">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false" aria-haspopup="true" v-pre>
                                    {{ Auth::user()->name }} <span class="caret"></span>
                                </a>

                                <ul class="dropdown-menu">
                                    <li>
                                        <a href="{{ route('logout') }}"
                                            onclick="event.preventDefault();
                                                     document.getElementById('logout-form').submit();">
                                            Logout
                                        </a>

                                        <form id="logout-form" action="{{ route('logout') }}" method="POST" style="display: none;">
                                            {{ csrf_field() }}
                                        </form>
                                    </li>
                                </ul>
                            </li>
                        @endguest

     - Neste caso essa parte não será preenchida como uma parametro igual a [titulo] e [url] e sim usando um outro método (slots). Esse método consiste em
       colocar uma "entrada" (referência) no lugar das linhas apagadas (faremos isso depois).
     
     - Agora Vamos abrir o arquivo [app.js] na pasta [resources\assets\js] e registrar o componente para que possamos usá-lo.
       Um outro componente já estava registrado lá:

            Vue.component('example-component', require('./components/ExampleComponent.vue'));

       Vamos copiar e alterar essa linha

            Vue.component('topo', require('./components/Topo.vue'));

     - Como o componente já está registrado podemos usá-lo na aplicação. Vamos alterar o arquivo [app.blade.php] na pasta [\resources\views\layouts]
       Inserindo o nosso componente topo com  todos os parametros necessários

       Logo abaixo das linhas 

            <body>
               <div id="app">
       
       Iserimos:

             <topo titulo="{{ config('app.name', 'Laravel') }}" url="{{ url('/') }}"></topo>

       Ainda falta colocar a parte que não faz parte dos parâmetros. Antes disso vamos apagar toda a nav bar (abaixo) e depois finalizamos topo. Vamos testar agora


        <nav class="navbar navbar-default navbar-static-top">
            <div class="container">
                <div class="navbar-header">

                    <!-- Collapsed Hamburger -->
                    <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#app-navbar-collapse" aria-expanded="false">
                        <span class="sr-only">Toggle Navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>

                    <!-- Branding Image -->
                    <a class="navbar-brand" href="{{ url('/') }}">
                        {{ config('app.name', 'Laravel') }}
                    </a>
                </div>

                <div class="collapse navbar-collapse" id="app-navbar-collapse">
                    <!-- Left Side Of Navbar -->
                    <ul class="nav navbar-nav">
                        &nbsp;
                    </ul>

                    <!-- Right Side Of Navbar -->
                    <ul class="nav navbar-nav navbar-right">
                        <!-- Authentication Links -->
                        @guest
                            <li><a href="{{ route('login') }}">Login</a></li>
                            <li><a href="{{ route('register') }}">Register</a></li>
                        @else
                            <li class="dropdown">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false" aria-haspopup="true" v-pre>
                                    {{ Auth::user()->name }} <span class="caret"></span>
                                </a>

                                <ul class="dropdown-menu">
                                    <li>
                                        <a href="{{ route('logout') }}"
                                            onclick="event.preventDefault();
                                                     document.getElementById('logout-form').submit();">
                                            Logout
                                        </a>

                                        <form id="logout-form" action="{{ route('logout') }}" method="POST" style="display: none;">
                                            {{ csrf_field() }}
                                        </form>
                                    </li>
                                </ul>
                            </li>
                        @endguest
                    </ul>
                </div>
            </div>
        </nav>


     - A parte que não compõe os parâmetros se chama Slots do VueJS. Será dessa forma que passaremos os links.
       Então a utilização do componente Topo no arquivo app.blade.php  ficará assim:

             <topo titulo="{{ config('app.name', 'Laravel') }}" url="{{ url('/') }}">
             
             
                        <!-- Authentication Links --  Tudo daqui para baixo vai substituir a tag slot no componente Topo>
                        @guest
                            <li><a href="{{ route('login') }}">Login</a></li>
                            <li><a href="{{ route('register') }}">Register</a></li>
                        @else
                            <li class="dropdown">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false" aria-haspopup="true" v-pre>
                                    {{ Auth::user()->name }} <span class="caret"></span>
                                </a>

                                <ul class="dropdown-menu">
                                    <li>
                                        <a href="{{ route('logout') }}"
                                            onclick="event.preventDefault();
                                                     document.getElementById('logout-form').submit();">
                                            Logout
                                        </a>

                                        <form id="logout-form" action="{{ route('logout') }}" method="POST" style="display: none;">
                                            {{ csrf_field() }}
                                        </form>
                                    </li>
                                </ul>
                            </li>
                        @endguest
             
             </topo>


     - Agora no componente Topo (arquivo Topo.vue) nos colocamos a tag <slot>
       e dessa forma todas vez que utilizar-mos o componente topo podemos passar o que quizermos para a posição slot
      
                    <!-- Right Side Of Navbar -->
                    <ul class="nav navbar-nav navbar-right">

                        <slot></slot>
                    </ul>

     - ATENÇÃO: Eu retornei ao curso umas semanas depois e ao executar o comando [npm run watch] obtive um erro. Na mensagem de erro foi indicado rodar o comando
       [npm rebuild node-sass]. Após rodar esse comando o [npm run watch] voltou a funcionar.

                    
05) Criando o Componente Painel (duas janelas que aparecem juntas quando você acaba de logar)


     - Primeiro vamos pegar o nosso arquivo [ExampleComponent.veu] da pasta [/resources/assets/js/components] e copiar para o arquivo [Painel.veu]

                <template>
                    <div class="container">
                        <div class="row">
                            <div class="col-md-8 col-md-offset-2">
                                <div class="panel panel-default">
                                    <div class="panel-heading">Example Component</div>

                                    <div class="panel-body">
                                        I'm an example component!
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </template>

                <script>
                    export default {
                        mounted() {
                            console.log('Component mounted.')
                        }
                    }
                </script>

     - Agora vamos apagar várias linhas em [Painel.vue] deixando apenas:
     
                <template>
                    <div class="panel panel-default">
                       <div class="panel-heading"> {{ titulo }}</div>

                       <div class="panel-body">
                           <slot></slot>
                       </div>
                    </div>
                </template>

                <script>
                    export default {
                       props: ['titulo']
                    }
                </script>
     
     - Podemos ver um array de propriedades (com só uma propriedade) na parte do Script que vai corresponder a um parâmetro na 
       linha [<div class="panel-heading"> {{ titulo }}</div>]
     - E um <slot> que vai ser substituído pelas informações dentro da tag <painel>XXXXXX</painel>
     
     - Após criar o componente vamos registra-lo no arquivo [app.js] na pasta [/resources/assets/js/app.js] com a linha:
       Vue.component('painel', require('./components/Painel.vue'));

     - Agora vou no arquivo [home.blade.php] na pasta [/resources/views] que está assim:
     
           @extends('layouts.app')

           @section('content')

           <div class="container">
              <div class="row">
                 <div class="col-md-8 col-md-offset-2">
                    <div class="panel panel-default">
                       <div class="panel-heading">Dashboard
                                   </div>

                       <div class="panel-body">
                          @if (session('status'))
                             <div class="alert alert-success">
                                {{ session('status') }}
                             </div>
                          @endif

                          You are logged in!
                       </div>
                    </div>
                 </div>
              </div>
           </div>


           @endsection


    - Vamos apagar várias linhas deixando assim:

           @extends('layouts.app')

           @section('content')

           <div class="container">
              <div class="row">
                 <div class="col-md-8 col-md-offset-2">
                       <painel titulo = "Dashboard"></painel>
                 </div>
              </div>
           </div>


           @endsection

    - Observe que nada foi colocado para substituir o slot por enquanto mas no final ficou assim com vários testes usando o componente

                @extends('layouts.app')

                @section('content')

                <div class="container">
                   <div class="row">
                     <div class="col-md-10 col-md-offset-1">
                         <painel titulo="Dashboard">
                           Teste de conteúdo..

                           <div class="row">
                             <div class="col-md-4">
                               <painel titulo="Conteúdo 1">
                                 Teste de conteúdo..

                               </painel>
                             </div>
                             <div class="col-md-4">
                               <painel titulo="Conteúdo 2">
                                 Teste de conteúdo..

                               </painel>
                             </div>
                             <div class="col-md-4">
                               <painel titulo="Conteúdo 3">
                                 Teste de conteúdo..

                               </painel>
                             </div>

                           </div>
                         </painel>
                     </div>
                   </div>
                </div>

                @endsection
     
06) Colocando CSS no Componente Painel (Aula05)

     - Vamos configurar o CSS no componente usando o Bootstrap 3.3 (Quando estava escrevendo esse texto já está na versão 4.5 que possui algumas diferenças)
     - O site é https://getbootstrap.com/docs/3.3/components/
     - Quando estava escrevendo esse texto já está na versão 4.5 que possui algumas diferenças - https://getbootstrap.com/docs/4.5/components
     - Na parte especifica de Paineis temos https://getbootstrap.com/docs/3.3/components/#panels exemplos

                <div class="panel panel-primary">...</div>
                <div class="panel panel-success">...</div>
                <div class="panel panel-info">...</div>
                <div class="panel panel-warning">...</div>
                <div class="panel panel-danger">...</div>

       Cada Painel desse tem uma cor diferente.

     - O Nosso componente Painel está assim:
     
                <template>
                    <div class="panel panel-default">   
                       <div class="panel-heading"> {{ titulo }}</div>

                       <div class="panel-body">
                           <slot></slot>
                       </div>
                    </div>
                </template>

                <script>
                    export default {
                       props: ['titulo']
                    }
                </script>

     - Queremos pegar essa class [panel panel-default] e substituir dinâmicamente por uma dessas do exemplo acima como [panel panel-primary]. Para isso faremos
     - Nosso componente [Painel.vue] passa a ficar dessa forma

                <template>
                  <div v-bind:class="defineCor">   (*01)
                      <div class="panel-heading">{{titulo}}</div>

                      <div class="panel-body">
                          <slot></slot>
                      </div>
                  </div>
                </template>

                <script>
                    export default {
                        props:['titulo','cor'],  (*02)
                        computed:{
                          defineCor: function(){ (*03)  
                            return "panel "+ (this.cor || "panel-default");  (*04)
                          }
                        }
                    }
                </script>

                <style media="screen">   (*05)
                  .blue {
                    border-color: #0d4a96;
                  }

                  .blue > .panel-heading {
                    color: #f7f7f7;
                    background-color: #0d4a96;
                    border-color: #0d4a96;
                  }

                  .orange {
                    border-color: #e85e0d;
                  }

                  .orange > .panel-heading {
                    color: #f7f7f7;
                    background-color: #e85e0d;
                    border-color: #e85e0d;
                  }

                </style>


     - (*01) - Substituimos a classe normal [panel panel-default] por uma chamada a uma função [defineCor]. Essa função está definida em (*03) para que o nome 
               da função possa ser reconhecida e não confundida com uma classe precissamos do comando [v-bind:] antes de class.
     - (*02) - Criamos um novo parametro [cor] que será passado na utilização do componente e será usado na função para a construção da String que representará a class
     - (*03) - A definição da função
     - (*04) - Concatena a palavra [panel] que é uma parte da class com o parâmetro cor [this.cor]. Caso cor não seja passado (ou seja na utilização do componente
               não tiver a propriedade cor="XXXXXXX") o || (ou) fará retornar o resultado [panel-default] que é o padrão do Bootstrap. 
     - (*05) - Estamos criando um conjunto de estilos especificos para o componente. Se desejamos algo diferente do Bootstrap podemos fazer nossos proprios estilos.
               Para descobrir o formato desses estilos nos inspecionamos o codigo de Painel e vimos qual erram as classes que o Bootstrap usava e ai copiamos
               e mudadmos o [color] (cor do texto) e [border-color] e [background-color]
               
               
     - Agora podemos usar o nosso componente das seguintes formas no arquivo [home.blade.php] :
        
               <painel titulo="Conteúdo 1" cor="panel-danger">    => cor com classe padrão do Bootstrap
                 Teste de conteúdo..
               </painel>

               <painel titulo="Conteúdo 2" cor="blue">            => cor com classe especifica do componente
                 Teste de conteúdo..
               </painel>

               <painel titulo="Conteúdo 3" cor="orange">          => cor com classe especifica do componente
                 Teste de conteúdo..
               </painel>


07) Iniciando o componente Caixa

     - Vamos inicialmente cria o componente sem nada, só o básico. [Caixa.vue] na pasta [resources\assets\js\components\Caixa.vue]

                <template>

                </template>

                <script>
                    export default {
                    }
                </script>

                <style media="screen">   
                </style>

     - Vamos registrar esse componente em [app.js] na pasta [resources\assets\js\app.js] 

           Vue.component('caixa', require('./components/Caixa.vue'));

     - Vamos utilizar no arquivo [resources\views\home.blade.php], substituindo o componente Painel pelo Caixa

               <painel titulo="Conteúdo 1" cor="panel-danger">
                 Teste de conteúdo..

               </painel>

               por

               <caixa></caixa>

     - Agora vamos aprimorar o nosso componente Caixa. Para isso precissamos inspecionar o site de onde pegamos a ideia desse componente e vamos
       copiar todo o html e todo o css referente a esse componente. O site é https://adminlte.io/themes/AdminLTE/index.html

     - Primeiro copiamos o html e colocamos dentro do <template>

                <template>

                   <div class="small-box bg-aqua">
                       <div class="inner">
                           <h3>150</h3>

                           <p>New Orders</p>
                       </div>
                       <div class="icon">
                           <i class="ion ion-stats-bars"></i>
                       </div>
                       <a href="#" class="small-box-footer">
                            More info <i class="fa fa-arrow-circle-right"></i>
                       </a>
                    </div>

                </template>

     - Depois copiamos todos os css que fizessem referência e colocamos dentro do <style>.
     
          .bg-aqua{
              background-color: #00c0ef !important;
          }

          .small-box {
            border-radius: 2px;
            position: relative;
            display: block;
            margin-bottom: 20px;
            box-shadow: 0 1px 1px rgba(0,0,0,0.1);
          }

          .small-box>.inner {
            padding: 10px;
          }

          .small-box h3, .small-box p {
            z-index: 5;
          }

          .small-box h3 {
            font-size: 38px;
            font-weight: bold;
            margin: 0 0 10px 0;
            white-space: nowrap;
            padding: 0;
          }

          .small-box p {
            font-size: 15px;
          }

          p {
            margin: 0 0 10px;
          }

          .small-box .icon {
            -webkit-transition: all .3s linear;
            -o-transition: all .3s linear;
            transition: all .3s linear;
            position: absolute;
            top: -10px;
            right: 10px;
            z-index: 0;
            font-size: 90px;
            color: rgba(0,0,0,0.15);
          }

          .small-box>.small-box-footer {
            position: relative;
            text-align: center;
            padding: 3px 0;
            color: #fff;
            color: rgba(255,255,255,0.8);
            display: block;
            z-index: 10;
            background: rgba(0,0,0,0.1);
            text-decoration: none;
          }

          a {
            color: #3c8dbc;
          }


     - E para que tudo funcione é preciso importar os icones e fontes. Poderiamos baixar os arquivos e incorporar ao nosso sistema mas é mais prático
       apenas importar o link aonde existem essas fontes e icones sem precisar trazer vários arquivos para poluir a nossa aplicação com um monte de 
       informação que provavelmente não iremos utilizar. Fazendo a inspeção no site adminlte identificamos o nome das fontes e icones e precisamos 
       procurar no Google o CDN (Content Delivery Network) dessas imagens e fontes. O CDN nada mais é do que o link que vamos importar para o 
       arquivo [resources\assets\sass\app.scss]

       Então localizamos os dois CDN que precisavamos:

       https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css
       http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css

       e  vamos coloca-los no arquivo [resources\assets\sass\app.scss]

       @import url("https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css");
       @import url("http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css");

     - Após inserir os dois CDN podemos usar os icones dos dois imports

       Ou Icone de Barras

       
       <div class="icon">
          <i class="ion ion-stats-bars"></i>
       </div>
       
       Ou Icone do Carrinho de Compras
       
       <div class="icon">
           <i class="fa fa-shopping-cart"></i>
       </div>


08) Finalizando o Componente caixa (veja aula 07)

     - Nesta aula apenas copiamos mais estilos da pagina adminlte e tornamos o componente mais generico com a introdução dos parametros.
       Idêntico ao que foi feito na aula 06

       Veja o componente abaixo:

                <template>
                  <div class="small-box" v-bind:style="defineCor">
                    <div class="inner">
                      <h3>{{qtd}}</h3>

                      <p>{{titulo}}</p>
                    </div>
                    <div class="icon">
                      <i v-bind:class="icone"></i>
                    </div>
                    <a href="#" class="small-box-footer">
                      Ver mais <i class="fa fa-arrow-circle-right"></i>
                    </a>
                  </div>
                </template>

                <script>
                    export default {
                      props:['qtd','titulo','url','cor','icone'],
                      computed:{
                        defineCor:function(){
                          return "background-color: "+this.cor+" !important;"
                        }
                      }

                    }
                </script>

                <style media="screen">
                  .bg-aqua{
                      background-color: #00c0ef !important;
                  }

                  .small-box {
                    border-radius: 2px;
                    position: relative;
                    display: block;
                    margin-bottom: 20px;
                    box-shadow: 0 1px 1px rgba(0,0,0,0.1);
                    color: #FFF;
                  }

                  .small-box:hover {
                    text-decoration: none;
                    color: #f9f9f9;
                  }

                  .small-box>.inner {
                    padding: 10px;
                  }

                  .small-box h3, .small-box p {
                    z-index: 5;
                  }

                  .small-box h3 {
                    font-size: 38px;
                    font-weight: bold;
                    margin: 0 0 10px 0;
                    white-space: nowrap;
                    padding: 0;
                  }

                  .small-box p {
                    font-size: 15px;
                  }

                  p {
                    margin: 0 0 10px;
                  }

                  .small-box .icon {
                    -webkit-transition: all .3s linear;
                    -o-transition: all .3s linear;
                    transition: all .3s linear;
                    position: absolute;
                    top: -10px;
                    right: 10px;
                    z-index: 0;
                    font-size: 90px;
                    color: rgba(0,0,0,0.15);
                  }

                  .small-box:hover .icon {
                    font-size: 95px;
                  }

                  .small-box>.small-box-footer {
                    position: relative;
                    text-align: center;
                    padding: 3px 0;
                    color: #fff;
                    color: rgba(255,255,255,0.8);
                    display: block;
                    z-index: 10;
                    background: rgba(0,0,0,0.1);
                    text-decoration: none;
                  }

                  a {
                    color: #3c8dbc;
                  }

                  .small-box>.small-box-footer:hover {
                    color: #fff;
                    background: rgba(0,0,0,0.15);
                  }

                  a:hover, a:active, a:focus {
                    outline: none;
                    text-decoration: none;
                    color: #72afd2;
                  }


                </style>


09) Criando o Componente Pagina

     - Nesta aula foi criado o componente Pagina. Apenas segue os mesmos passos das aulas 05, 06, 07 e 08
     - Componente [resources\assets\js\components\Pagina.vue]

                <template>
                  <div class="container">
                      <div class="row">
                          <div v-bind:class="defineTamanho">
                              <slot></slot>
                          </div>
                      </div>
                  </div>
                </template>

                <script>
                    export default {
                        props:['tamanho'],
                        computed:{
                          defineTamanho: function(){
                            if(this.tamanho >= 12){
                              return "col-md-12";
                            }
                            if(this.tamanho <= 2){
                              return "col-md-2 col-md-offset-5";
                            }
                            if((this.tamanho % 2) == 0){
                              return "col-md-"+this.tamanho+" col-md-offset-"+((12 - this.tamanho)/2);
                            }else{
                              return "col-md-"+(parseInt(this.tamanho) + 1)+" col-md-offset-"+((12 - (parseInt(this.tamanho) + 1))/2);
                            }
                          }
                        }
                    }
                </script>

     - Registro em [resources\assets\js\app.js] ==> Vue.component('pagina', require('./components/Pagina.vue'));
     - Alteração no arquivo [resources\views\home.blade.php] para mostrar a utilização do Componente
                @extends('layouts.app')

                @section('content')
                  <pagina tamanho="4">
                    <painel titulo="Dashboard">
                      Teste de conteúdo..

                      <div class="row">
                        <div class="col-md-4">
                          <caixa qtd="80" titulo="Artigos" url="#" cor="orange" icone="ion ion-pie-graph"></caixa>
                        </div>
                        <div class="col-md-4">
                          <caixa qtd="1500" titulo="Usuários" url="#" cor="blue" icone="ion ion-person-stalker"></caixa>
                        </div>
                        <div class="col-md-4">
                          <caixa qtd="3" titulo="Autores" url="#" cor="red" icone="ion ion-person"></caixa>
                        </div>
                      </div>
                    </painel>

                  </pagina>
                @endsection


10) Criando um Resource Controller

     - Voltando ao componente [resources\assets\js\components\Caixa.vue], vamos colocar o link para funcionar. Então precisamos colocar o parâmetro [url] funcionando.
       Para isso alteramos a linha para ficar dessa forma [<a v-bind:href="url" class="small-box-footer">]
     - Agora vamos no arquivo [resources\views\home.blade.php] e colocamos qualquer url para teste
       [<caixa qtd="80" titulo="Artigos" url="#teste" cor="orange" icone="ion ion-pie-graph"></caixa>]
     - Para Criar um CRUD temos que: Fazer um Controoller, Fazer as Rotas e Criar as Views
     - Criando o Controller usando o sistema do Laravel ResourceController (já traz os métodos prontos e facilita a criação das Rotas)
     - Para Criar um ResourceController vamos no Endereco [https://laravel.com/docs/5.5/controllers#resource-controllers] e lá tem um exemplo
       O Comando que cria um ResourceController é [php artisan make:controller PhotoController --resource] 
       Vamos substituir Photo por Artigos e já criar um NameSpace (ou seja uma pasta) para organizar os nossos controllers. Então o comando vai ficar:
       [php artisan make:controller Admin/ArtigosController --resource] Nesse caso o [Admin] representa o NameSpace (pasta) TUDO ISSO NA PASTA DA APLICAÇÃO
     - Temos então [app\Http\Controllers\Admin\ArtigosController.php] criado.

                <?php

                namespace App\Http\Controllers\Admin;

                use Illuminate\Http\Request;
                use App\Http\Controllers\Controller;

                class ArtigosController extends Controller
                {
                    /**
                     * Display a listing of the resource.
                     *
                     * @return \Illuminate\Http\Response
                     */
                    public function index()
                    {
                        //
                    }

                    /**
                     * Show the form for creating a new resource.
                     *
                     * @return \Illuminate\Http\Response
                     */
                    public function create()
                    {
                        //
                    }

                    /**
                     * Store a newly created resource in storage.
                     *
                     * @param  \Illuminate\Http\Request  $request
                     * @return \Illuminate\Http\Response
                     */
                    public function store(Request $request)
                    {
                        //
                    }

                    /**
                     * Display the specified resource.
                     *
                     * @param  int  $id
                     * @return \Illuminate\Http\Response
                     */
                    public function show($id)
                    {
                        //
                    }

                    /**
                     * Show the form for editing the specified resource.
                     *
                     * @param  int  $id
                     * @return \Illuminate\Http\Response
                     */
                    public function edit($id)
                    {
                        //
                    }

                    /**
                     * Update the specified resource in storage.
                     *
                     * @param  \Illuminate\Http\Request  $request
                     * @param  int  $id
                     * @return \Illuminate\Http\Response
                     */
                    public function update(Request $request, $id)
                    {
                        //
                    }

                    /**
                     * Remove the specified resource from storage.
                     *
                     * @param  int  $id
                     * @return \Illuminate\Http\Response
                     */
                    public function destroy($id)
                    {
                        //
                    }
                }


     - O Controller já traz todos os métodos que utilizaremos no nosso CRUD
     - Agora Vamos configurar as Nossas Rotas. Na página de Documentação [https://laravel.com/docs/5.5/controllers#resource-controllers] e lá tem um exemplo
       
       (*1) Route::resource('photos', 'PhotoController');  // Fazendo uma de Cada Vez

       (*2) Route::resources([                             // Fazendo várias no mesmo comando
              'photos' => 'PhotoController',
              'posts' => 'PostController'
            ]);

     - Vamos no arquivo [routes\web.php] configurar as nossas rotas.
     - Neste caso primeiro vamos criar um Grupo de Rotas pois na criação do grupo já configuramos várias propriedades e dentro do grupo vamos criar as rotas
       que podem ser iguais a (*1) e/ou (*2). Então nosso comando ficou assim:

           Route::middleware(['auth'])->prefix('admin')->namespace('Admin')->group(function(){

              Route::resource('artigos', 'ArtigosController');

           });

     - group(function() {     => É o comando que cria um grupo de rotas. Todas as Rotas criadas entre o { e } pertencem ao grupo.

     - namespace('Admin')     => Esse é o NameSpace de todas as Rotas Dentro do Grupo. Evita ter que esecrver o Admin antes de cada rota 
                                 [Route::resource('artigos', 'Admin/ArtigosController');] 


     - prefix('admin')        => Esse é prefixo que será usado na URL para todas as rotas do grupo ex: [http://xxxx/yyyy/admin/artigos]
                                 [Route::resource('artigos', 'Admin/ArtigosController');] 


     - middleware(['auth'])   => Parece ser a Autorização. Ou seja quem pode usar a Rota. Não ficou claro e depois devo voltar aqui. Como ['auth'] é um
                                 array (ou seja você pode colocar mais gente entre [] fica parecendo mesmo autorização. No exemplo da aula esse comando
                                 estava no Construtor de um Controller e foi dito que isso evitaria ter que colocar esse comando em todos os 
                                 Controllers (construtor)

     - Após fazer o Controller e configurar as Rotas. Vamos testar para ver se funciona. 
       Vamos no arquivo [app\Http\Controllers\Admin\ArtigosController.php] no método index e colocar um [return "Ok";] em seguida digitamos 
       [http://localhost:8000/admin/artigos] deve aparecer o Ok


     - Existe uma tabela na página de Documentação [https://laravel.com/docs/5.5/controllers#resource-controllers] que informa o que será executado para cada URI


       URI                           Verbo                  Ação                     Nome da Rota
       ------------------------      ------------------     ---------------------    -------------------------------
       /admin/artigos                GET                    index                    artigos.index
       /admin/artigos/{id}           GET                    show                     artigos.show
       /admin/artigos/{id}           PUT/PATCH              update                   artigos.update
       /admin/artigos/{id}           DELETE                 destroy                  artigos.destroy
       /admin/artigos/{id}/edit      GET                    edit                     artigos.edit
       /admin/artigos                POST                   store                    artigos.store
       /admin/artigos/create         GET                    create                   artigos.create


11) Criando uma View para a Lista de Artigos

     - Vamos no Controller [app\Http\Controllers\Admin\ArtigosController.php] no método index e retornamos a nossa view dessa maneira:
           return view('admin.artigos.index');    
     - Onde [admin] é uma pasta dentro de [resources/views] e [artigos] é uma pasta dentro da pasta [admin]
     - No final [index] é um arquivo [index.blade.php] dentro da pasta [artigos]
     - No arquivo [resources\views\admin\artigos\index.blade.php] colocamos uma copia atualizada do [home.blade.php]

                @extends('layouts.app')

                @section('content')
                  <pagina tamanho="12">
                    <painel titulo="Lista de Artigos">
                      Teste de conteúdo..
                    </painel>

                  </pagina>
                @endsection

     - Agora precisamos configurar o Link da Caida de Artigos para apontar para o [index.blade.phph]. Para isso vamos no arquivo [home.blade.php]
       e alteramos a [url]

          <caixa qtd="80" titulo="Artigos" url="{{route('artigos.index')}}" cor="orange" icone="ion ion-pie-graph"></caixa>

     - O comando [route('artigos.index'] acima usa uma função do Laravel para desviar para o Nome da Rota informado. Podemos ver na tabela
       acima que o Nome da Rota [artigos.index] vai para a URI [/admin/artigos] com o metodo [GET] e para a ação [index]

12) Tabela Lista de Artigos

     - Vamos contruir uma tabela Html no arquivo [resources\views\admin\artigos\index.blade.php] para listar todos os artigos  e permitir a criação de um novo
     - Na criação dessa html-table usamos algumas classes do Bootstrap 3.3. para descobrir quais classes vamos no link [https://getbootstrap.com/docs/3.3/css]
       e lá vimos essas classes [table table-striped table-hover] que estão logo abaixo
     - Para isso na View de Index alteramos para ficar assim:

                @extends('layouts.app')

                @section('content')
                  <pagina tamanho="12">
                    <painel titulo="Lista de Artigos">
                      <a href="#">Criar</a>

                      <table class="table table-striped table-hover">
                        <thead>
                          <tr>
                            <th>#</th>
                            <th>Título</th>
                            <th>Descrição</th>
                            <th>Autor</th>
                            <th>Data</th>
                            <th>Ação</th>
                          </tr>
                        </thead>
                        <tbody>
                          <tr>
                            <td>1</td>
                            <td>Título ..</td>
                            <td>Descrição ...</td>
                            <td>Autor ..</td>
                            <td>Data ..</td>
                            <td>
                              <a href="#">Editar</a> |
                              <a href="#">Deletar</a>

                            </td>
                          </tr>
                          <tr>
                            <td>1</td>
                            <td>Título ..</td>
                            <td>Descrição ...</td>
                            <td>Autor ..</td>
                            <td>Data ..</td>
                            <td>
                              <a href="#">Editar</a> |
                              <a href="#">Deletar</a>

                            </td>
                          </tr>
                          <tr>
                            <td>1</td>
                            <td>Título ..</td>
                            <td>Descrição ...</td>
                            <td>Autor ..</td>
                            <td>Data ..</td>
                            <td>
                              <a href="#">Editar</a> |
                              <a href="#">Deletar</a>

                            </td>
                          </tr>
                          <tr>
                            <td>1</td>
                            <td>Título ..</td>
                            <td>Descrição ...</td>
                            <td>Autor ..</td>
                            <td>Data ..</td>
                            <td>
                              <a href="#">Editar</a> |
                              <a href="#">Deletar</a>

                            </td>
                          </tr>

                        </tbody>

                      </table>


                    </painel>

                  </pagina>
                @endsection


     - Claro que isso é apenas um teste para mais tarde transformarmos essa tabela em um componente


13) Componente TabelaLista - Titulos

     - Vamos pegar todo o conteúdo da nossa html-tabela em [index.blade.php] e criar um componente.
     - Para não ficarmos todo hora copiando o componente [resources\assets\js\components\ExampleComponent.vue] para um novo que desejamos criar e apagando
       as linhas desnecessárias, vamos criar um componente chamado de [Base.vue] que não será usado em lugar nenhum mas servirá para gerar os novos sem precisarmos
       ficar apagando linhas. NÃO PODEMOS ESQUECER QUE DENTRO DE <TEMPLATE> SÓ PODE EXISTIR UMA TAG ENTÃO SE O COMPONENTE POSSUI MAIS DE UMA TAG DEVEMOS
       COLOCAR UMA <DIV> ENVOLVENDO AS TAGS DO COMPONENTE
     - Nosso componente [Base.vue] ficou assim:

                <template>

                </template>

                <script>
                    export default {

                    }
                </script>
                <style media="screen">


                </style>





     - Vamos chamar o componente de [TabelaLista.vue] e registrar o mesmo em [resources\assets\js\app.js] 
       Vue.component('tabela-lista', require('./components/TabelaLista.vue'));

     - Vamos copiar uma parte do conteúdo do arquivo [resources\views\admin\artigos\index.blade.php], o index de Artigos e coloca-lo no nosso componente TabelaLista.vue
     - Então a parte abaixo foi retirada do [resources\views\admin\artigos\index.blade.php] e colocada no [resources\assets\js\components\TabelaLista.vue]

              <a href="#">Criar</a>

              <table class="table table-striped table-hover">
                <thead>
                  <tr>
                    <th>#</th>
                    <th>Título</th>
                    <th>Descrição</th>
                    <th>Autor</th>
                    <th>Data</th>
                    <th>Ação</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>1</td>
                    <td>Título ..</td>
                    <td>Descrição ...</td>
                    <td>Autor ..</td>
                    <td>Data ..</td>
                    <td>
                      <a href="#">Editar</a> |
                      <a href="#">Deletar</a>

                    </td>
                  </tr>
                  <tr>
                    <td>1</td>
                    <td>Título ..</td>
                    <td>Descrição ...</td>
                    <td>Autor ..</td>
                    <td>Data ..</td>
                    <td>
                      <a href="#">Editar</a> |
                      <a href="#">Deletar</a>

                    </td>
                  </tr>
                  <tr>
                    <td>1</td>
                    <td>Título ..</td>
                    <td>Descrição ...</td>
                    <td>Autor ..</td>
                    <td>Data ..</td>
                    <td>
                      <a href="#">Editar</a> |
                      <a href="#">Deletar</a>

                    </td>
                  </tr>
                  <tr>
                    <td>1</td>
                    <td>Título ..</td>
                    <td>Descrição ...</td>
                    <td>Autor ..</td>
                    <td>Data ..</td>
                    <td>
                      <a href="#">Editar</a> |
                      <a href="#">Deletar</a>

                    </td>
                  </tr>

                </tbody>

              </table>

     - No [resources\views\admin\artigos\index.blade.php] colocamos o <tabela-lista></tabela-lista> ou seja usando o componente.
     - Agora vamos parametrizar as informações que serão passadas para o componente. Então vamos passar os titulos das colunas da tabela.
     - Então a utilização do componente deixa de ser apenas <tabela-lista></tabela-lista> para:

            <tabela-lista v-bind:titulos="['#', 'Título', 'Descrição']"></tabela-lista>

     - Como estou passando como parâmetro um array preciso colocar o v-bind para os titulos

     - Agora precisamos colocar uma propriedade no nosso componente para pegar esse array acima e transforma-lo em cada <th> no nosso compoenete.

                <script>
                    export default {
                           props: ['titulos']
                    }
                </script>

     - Agora vamos utilizar o parâmetro. Então no local desses <th> abaixo (atenção os <th> abaixo não refletem o real da aplicação, foram usados so como exêmplo):


                <thead>
                  <tr>
                    <th>#</th>
                    <th>Título</th>
                    <th>Descrição</th>
                    <th>Autor</th>
                    <th>Data</th>
                    <th>Ação</th>
                  </tr>
                </thead>

     - teremos:

                <thead>
                  <tr>
                     <th v-for="titulo in titulos" :key="titulo">{{ titulo }}</th>
                     <th>Ação</th>
                  </tr>
                </thead>


14) Componente TabelaLista - Itens

     - Agora vamos resolver como colocar os dados da tabela no nosso componente. Ou seja vamos resolver a parte de cada <tr>
     - Neste caso agora teremos um Array de Arrays ou seja uma "Matriz". Na definição da propriedade não muda nada. Temos:

                <script>
                    export default {
                           props: ['titulos', 'itens']
                    }
                </script>

     - Agora na construção do parâmetro como cada [x,y,z] representa um array com x,y e z como elementos e nos temos um array de array 
       então usamos [ [x,y,z],[a,b,c],...]  

            <tabela-lista 
            
                  v-bind:titulos="['#', 'Título', 'Descrição']"
                  
                  v-bind:itens="[[1,  'PHP OO', 'Curso de PHP OO'], [2,  'Vue JS', 'Curso de Vue JS']]"
                  
            ></tabela-lista>

     - Agora na hora de mostrar os itens como temos um array de array faremos dois v-for:

                  <tr v-for="item in itens" :key="item">
                    <td v-for="info in item" :key="info">{{ info }}</td>
                    <td>
                      <a href="#">Editar</a> |
                      <a href="#">Deletar</a>
                    </td>
                  </tr>


15) Componente Tabela Lista - Ação
     - Essa aula será explicada na próxima aula (16). Basicamente consiste na criação de um parâmetro para cada ação (Criar, Detalhe, Editar, Deletar)
       e na construção de If's no htmls para permitir ou não que os links de ação aparecam. Tem um detalhe no link do delete pois deve-se construir
       um formulário com o verbo "delete" e com um token (provavelmente o id do elemento da tabela que deve ser deletado) para que a ação delete seja executada. 


16) Componente Tabela Lista - Deletar

     - Aqui eu vou colocar todo o código do componente TabelaLista e a sua utilização e em seguida vou explicar cada situação

       [resources\assets\js\components\TabelaLista.vue] - Componente

                <template>
                  <div>
          (*01)     <a v-if="criar" v-bind:href="criar">Criar</a>   

                    <table class="table table-striped table-hover">
                      <thead>
                        <tr>
                          <th v-for="titulo in titulos" :key="titulo">{{titulo}}</th>

          (*02)           <th v-if="detalhe || editar || deletar">Ação</th>
                        </tr>
                      </thead>
                      <tbody>
          (*03)         <tr v-for="(item,index) in itens" :key="item">
                          <td v-for="i in item" :key="i" >{{i}}</td>

          (*04)           <td v-if="detalhe || editar || deletar">
          (*05)             <form v-bind:id="index" v-if="deletar && token" v-bind:action="deletar" method="post">
          (*06)               <input type="hidden" name="_method" value="DELETE">
          (*07)               <input type="hidden" name="_token" v-bind:value="token">

          (*08)               <a v-if="detalhe" v-bind:href="detalhe">Detalhe |</a>
          (*09)               <a v-if="editar" v-bind:href="editar"> Editar |</a>

          (*10)               <a href="#" v-on:click="executaForm(index)"> Deletar</a>

                            </form>
          (*11)             <span v-if="!token">
                              <a v-if="detalhe" v-bind:href="detalhe">Detalhe |</a>
                              <a v-if="editar"  v-bind:href="editar"> Editar |</a>
                              <a v-if="deletar" v-bind:href="deletar"> Deletar</a>
                            </span>
          (*12)             <span v-if="token && !deletar">
                              <a v-if="detalhe" v-bind:href="detalhe">Detalhe |</a>
                              <a v-if="editar" v-bind:href="editar"> Editar</a>
                            </span>


                          </td>
                        </tr>


                      </tbody>

                    </table>

                  </div>

                </template>

                <script>
                    export default {
                      props:['titulos','itens','criar','detalhe','editar','deletar','token'],
          (*19)       methods:{
                        executaForm: function(index){
          (*20)            document.getElementById(index).submit();
                        }
                      }
                    }
                </script>


       [resources\views\admin\artigos\index.blade.php] Utilização do componente <tabela-lista>

                @extends('layouts.app')

                @section('content')
                  <pagina tamanho="12">
                    <painel titulo="Lista de Artigos">
                      <tabela-lista

                           v-bind:titulos="['#','Título','Descrição']"
                          
                           v-bind:itens="[  [1,'PHP OO','Curso de PHP OO'],
                                            [2,'Vue JS','Curso de Vue JS']     ]"
                        
                   (*50)  criar="#criar" 
                   (*51)  detalhe="#detalhe" 
                   (*52)  editar="#editar" 
                   (*53)  deletar="#deletar" 
                   (*54)  token="7887522323"


                      ></tabela-lista>

                    </painel>

                  </pagina>
                @endsection

    (*01) - <a v-if="criar" v-bind:href="criar">Criar</a>  

            v-if="criar" está testando se o parâmetro criar foi definido e preenchido na utilização do componente. Se em (*50) fizermos criar="" v-if vai dar false e
            a linha não será mostrada. Se em (*50) nem colocarmos o [criar] então v-if também vai dar false. Então cada teste do v-if será sempre sobre algum parâmetro.

            v-bind:href="criar" vai para o link que estiver dentro do parâmetro criar ou seja. Se na utilização do componente colocarmos criar="www.google.com" ao
            clicar na palavra "Criar" que está no link vamos para a página do google.

    (*02) - <th v-if="detalhe || editar || deletar">Ação</th>

            A palavra "Ação" só vai aparecer se pele menos um dos parâmetros [detalhe] (*51) ou [editar] (*52) ou [deletar] (*53) tiver sido definido e preenchido.

    (*03) - <tr v-for="(item,index) in itens" :key="item">

            Neste caso o for vai manipular dois elementos. item é cada informação do array itens que por exemplo é [1,'PHP OO','Curso de PHP OO'] definido na chamada
            e index é a posição do elemento dentro do array por exemplo [1] está na posição [0], [PHP OO] está na posição [1] e [Curso de PHP OO] está na posição [2]
            o index será usado como [id] de elementos Html para que mais tarde possamos acessar esses elementos com a função [document.getElementById(index)]

    (*04) - <td v-if="detalhe || editar || deletar">

            Usando a mesma analogia do (*02). Neste caso TODO o td só existirá se pele menos um dos parâmetros tenha sido informado.

    (*05) - <form v-bind:id="index" v-if="deletar && token" v-bind:action="deletar" method="post">

            Neste caso estamos construindo um html-form caso existam os parâmetros [deletar] e [token]. Usando Laravel, toda vez que temos que usar uma
            ação de [Delete] devemos contruir um form e colocar como metodo a opção [Delete]. Para usarmos esse form com essa opção devemos também ter 
            um [token] (acredito que esse token seja o Id da linha que desejamos deletar). [v-if="deletar && token"] garante que o html-form só existirá
            se essa condição for verdadeira. Observe também que o action [v-bind:action="deletar"] é o parâmetro (url) [deletar] que foi passado. E será
            executada no javascript do metodo em (*20)

    (*06) - <input type="hidden" name="_method" value="DELETE"> 
    
            Muda o metodo do form para [DELETE] que é o verbo dejesado (não é GET, nem POST..). Observe que é um campo escondido [hidden]

    (*07) - <input type="hidden" name="_token" v-bind:value="token">

            Coloca no formulário o campo [Token] também escondido

    (*08) - <a v-if="detalhe" v-bind:href="detalhe">Detalhe |</a>

            Apenas define o linke [Detalhe] dentro do html-form caso o parãmetro [detalhe] seja definido e preenchido

    (*09) - <a v-if="editar" v-bind:href="editar"> Editar |</a>

            Apenas define o linke [Editar] dentro do html-form caso o parãmetro [editar] seja definido e preenchido

    (*10) - <a href="#" v-on:click="executaForm(index)"> Deletar</a>

            Define o link [Deletar] pois o parametro [deletar] já foi testado na definição do html-form. O detalhe é que o click no link leva a
            execução do metodo definido na linha (*19) que por sua vez executa o [submit] do [form] identificado por 0, ou 1, ou 2 (ou seja o indice)
            Geralmente não usamos a opção [methods:{] quando estamos em uma repetição pois sobrecarrega a página mas nesse caso o [method] só será executado
            pelo click do usuário. (se não fosse assim usariamos o [computed:{]

    (*11) - <span v-if="!token">

            Se não for definido o [token] (!token) então não podemos ter um html-form e o processo segue o curso normal. Ou seja, cada parâmetro é testado
            e se existir um link para a URL passada como parâmetro é criado.
            
    (*12) - <span v-if="token && !deletar">

             Se tem [token] mas não tem o [deletar] é porque foi um erro então só aparace [detalhe] e [editar] se existirem


17) Criando o Campo de Busca - Parte 1
     - Essa aula será explicada na próxima aula (18). Basicamente consiste na criação de um campo para fazer a pesquisa em [itens] e filtrar as linhas pela 
       informação colocada no campo de pesquisa. 

18) Criando o Campo de Busca - Parte 2
     - Aqui eu vou colocar todo o código do componente TabelaLista e a sua utilização e em seguida vou explicar apenas as modificações referentes ao 
       campo de pesquisa

         <template>
           <div>
             <a v-if="criar" v-bind:href="criar">Criar</a>

     (*01)   <div class="form-group pull-right">
               <input type="search" class="form-control" placeholder="Buscar" v-model="buscar" >
             </div>

             <table class="table table-striped table-hover">
               <thead>
                 <tr>
                   <th v-for="titulo in titulos" :key=titulo>{{titulo}}</th>

                   <th v-if="detalhe || editar || deletar">Ação</th>
                 </tr>
               </thead>
               <tbody>
     (*02)         <tr v-for="(item,index) in lista" :key=item>
                   <td v-for="i in item" :key=i >{{i}}</td>

                   <td v-if="detalhe || editar || deletar">
                     <form v-bind:id="index" v-if="deletar && token" v-bind:action="deletar" method="post">
                       <input type="hidden" name="_method" value="DELETE">
                       <input type="hidden" name="_token" v-bind:value="token">

                       <a v-if="detalhe" v-bind:href="detalhe">Detalhe |</a>
                       <a v-if="editar" v-bind:href="editar"> Editar |</a>

                       <a href="#" v-on:click="executaForm(index)"> Deletar</a>

                     </form>
                     <span v-if="!token">
                       <a v-if="detalhe" v-bind:href="detalhe">Detalhe |</a>
                       <a v-if="editar" v-bind:href="editar"> Editar |</a>
                       <a v-if="deletar" v-bind:href="deletar"> Deletar</a>
                     </span>
                     <span v-if="token && !deletar">
                       <a v-if="detalhe" v-bind:href="detalhe">Detalhe |</a>
                       <a v-if="editar" v-bind:href="editar"> Editar</a>
                     </span>


                   </td>
                 </tr>


               </tbody>

             </table>

           </div>

         </template>

         <script>
             export default {
               props:['titulos','itens','criar','detalhe','editar','deletar','token'],

     (*50)     data: function(){
                 return {
                   buscar:''
                 }
               },

               methods:{
                 executaForm: function(index){
                   document.getElementById(index).submit();
                 }
               },

      (*55)    computed:{
                 lista:function(){

                   return this.itens.filter(item => {
                      for(let k = 0;k < item.length; k++){
                         if((item[k] + "").toLowerCase().indexOf(this.buscar.toLowerCase()) >= 0){
                           return true;
                         }
                      }
                      return false;

                     });
                  }
                }
             }
         </script>

    (*01) - <div class="form-group pull-right">
               <input type="search" class="form-control" placeholder="Buscar" v-model="buscar" >
            </div>

            Neste caso estamos criando um campo para que seja digitado a informação de pesquisa. [type="search"] é do Html 5 usado para pesquisa.
            As [class] utilizadas são do Bootstrap 3. [v-model="buscar"] define io nome de uma variável que deve ser declarada em  (*50). Com o 
            comando [data e a definição de uma função que retorna um objeto e dentro desse objeto deve existir uma variável com o mesmo nome]


    (*02) - <tr v-for="(item,index) in lista" :key=item>
        
            Está parte é fundamental. No local onde agora está [lista] antes existia o nome do parâmetro [itens] que continha todos os dados que seriam
            mostradados dentro do [v-for]. Agora [lista] é uma [function] (*55) javascript que deve dizer quais elementos de itens devem retornar ou não.
            Então dessa forma conseguimos fazer um Filtro. Lembrando que [itens] é uma array de array. Ainda não ficou claro o que faz com que a página
            seja recarregada para cada digitação no campo [type="search"] e dessa forma [lista] é chamada e o conteúdo do campo [buscar] é procurado nos
            elementos do vetor [item] (já que [itens] é array de array)

    (*50) - data: function(){

            É apenas a forma usada para criar uma variável no VUE. Deve-se declarar uma function com o comando data e está function deve retornar um objeto
            com o nome das variaveis definidas. 

    (*55) - computed:{

            Foi criada uma função computada e não um metodo porque essa função será chamada varias vezes (a cada digitação no campo [buscar] e parece que
            uma função computada é muito mais leve que um metodo). A função se chama lista e vai retornar elementos (item) de itens que passem no if. 
            [return this.itens.filter(item =>] faz com que cada elemento [item] de [itens] seja percorrido. Como [item] é um array então o [for k] normal abaixo
            percorre cada elemento de [item] e verifica se a string [buscar] está dentro (faz parte) deste elemento [indexof]. Como tem um elemento de item
            que é número (no caso o # que é 1, 2, 3, 4, ...) o comando (item[k] + "") transforma tudo em string. Se of if for [true] todo o [item] (todos os
            elementos do item ) será retornado. Se o [for k] for até o fim e em nenhum momento o [return true] for executado então será executado o 
            [return false] e o [item] não será considerado.


19) Lógica para ordenar a Lista
     - Essa aula será explicada na aula (22). Basicamente consiste na criação de um código simples que permite ordernar o grid (lista) clicando na descrição do
       campo no cabecalho. Utilizaremos a função computada da aula (18) pois ela retorna a Lista que será apresentada e já retornaremos essa lista ordenada.
       informação colocada no campo de pesquisa. 

20) Ordenação dinâmica

21) Método para Ordenar por Coluna - Parte 1

22) Método para Ordenar por Coluna - Parte 2
     - Vou colocar aqui o componente e sua utilização.

       Componente [resources\assets\js\components\TabelaLista.vue]


            <template>
              <div>

                <div class="form-inline">
                  <a v-if="criar" v-bind:href="criar">Criar</a>
                  <div class="form-group pull-right">
                    <input type="search" class="form-control" placeholder="Buscar" v-model="buscar" >
                  </div>
                </div>

                <table class="table table-striped table-hover">
                  <thead>
                    <tr>
      (*01)           <th style="cursor:pointer" v-on:click="ordenaColuna(index)" v-for="(titulo,index) in titulos" :key="titulo">{{titulo}}</th>

                      <th v-if="detalhe || editar || deletar">Ação</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr v-for="(item,index) in lista" :key="item">
                      <td v-for="i in item" :key="i">{{i}}</td>

                      <td v-if="detalhe || editar || deletar">
                        <form v-bind:id="index" v-if="deletar && token" v-bind:action="deletar" method="post">
                          <input type="hidden" name="_method" value="DELETE">
                          <input type="hidden" name="_token" v-bind:value="token">

                          <a v-if="detalhe" v-bind:href="detalhe">Detalhe |</a>
                          <a v-if="editar" v-bind:href="editar"> Editar |</a>

                          <a href="#" v-on:click="executaForm(index)"> Deletar</a>

                        </form>
                        <span v-if="!token">
                          <a v-if="detalhe" v-bind:href="detalhe">Detalhe |</a>
                          <a v-if="editar" v-bind:href="editar"> Editar |</a>
                          <a v-if="deletar" v-bind:href="deletar"> Deletar</a>
                        </span>
                        <span v-if="token && !deletar">
                          <a v-if="detalhe" v-bind:href="detalhe">Detalhe |</a>
                          <a v-if="editar" v-bind:href="editar"> Editar</a>
                        </span>


                      </td>
                    </tr>


                  </tbody>

                </table>

              </div>

            </template>

            <script>
                export default {

      (*02)       props:['titulos','itens','ordem','ordemcol','criar','detalhe','editar','deletar','token'],

                  data: function(){
                    return {
                      buscar:'',
      (*03)           ordemAux: this.ordem || "asc",
                      ordemAuxCol: this.ordemcol || 0
                    }
                  },
                  methods:{
                    executaForm: function(index){
                      document.getElementById(index).submit();
                    },
           
      (*04)         ordenaColuna: function(coluna){
                      this.ordemAuxCol = coluna;
                      if(this.ordemAux.toLowerCase() == "asc"){
                        this.ordemAux = 'desc';
                      }
                      else{
                        this.ordemAux = 'asc';
                      }
                    }
                  },

                  computed:{
                    lista:function(){

      (*05)           let ordem = this.ordemAux;
                      let ordemCol = this.ordemAuxCol;
                      ordem = ordem.toLowerCase();
                      ordemCol = parseInt(ordemCol);

      (*06)           if(ordem == "asc"){
                        this.itens.sort(function(a,b){
                          if (a[ordemCol] > b[ordemCol] ) { return 1;}
                          if (a[ordemCol] < b[ordemCol] ) { return -1;}
                          return 0;
                        });
                      }
                      else{
                        this.itens.sort(function(a,b){
                          if (a[ordemCol] < b[ordemCol] ) { return 1;}
                          if (a[ordemCol] > b[ordemCol] ) { return -1;}
                          return 0;
                        });
                      }



                      return this.itens.filter(res => {
                        for(let k = 0;k < res.length; k++){
                          if((res[k] + "").toLowerCase().indexOf(this.buscar.toLowerCase()) >= 0){
                            return true;
                          }
                        }
                        return false;

                      });


                      return this.itens;
                    }
                  }
                }
            </script>


       Utilização do Componente [resources\views\admin\artigos\index.blade.php]

            @extends('layouts.app')

            @section('content')
              <pagina tamanho="12">
                <painel titulo="Lista de Artigos">
                  <tabela-lista
                  v-bind:titulos="['#','Título','Descrição']"
                  v-bind:itens="[
                                  [1,'PHP OO','Curso de PHP OO'],
                                  [2,'Vue JS','Curso de Vue JS'],
                                  [3,'Curso A','Curso de A'],
                                  [4,'Curso D','Curso de D'],
                                  [5,'Curso G','Curso de G'],
                                  [6,'Curso C','Curso de C'],
                                  [7,'Curso W','Curso de W'],
                                  [8,'Curso N','Curso de N'],
                                  [9,'Curso L','Curso de L'],
                                  [10,'Curso B','Curso de B'],
                                  [11,'Curso Q','Curso de Q'],
                                  [12,'Curso E','Curso de E'],
                                  [13,'Curso T','Curso de T'],
                                  [14,'Curso H','Curso de H'],
                                  [15,'Curso X','Curso de X'],
                                  [16,'Curso O','Curso de O'],
                                  [17,'Curso I','Curso de I'],
                                  [18,'Curso K','Curso de K'],
                                  [19,'Curso Y','Curso de Y'],
                                  [20,'Curso P','Curso de P']
                                ]"

                  ordem="desc" ordemcol="1"
                  criar="#criar" detalhe="#detalhe" editar="#editar" deletar="#deletar" token="7887522323"


                  ></tabela-lista>

                </painel>

              </pagina>
            @endsection


    (*01) - <th style="cursor:pointer" v-on:click="ordenaColuna(index)" v-for="(titulo,index) in titulos" :key="titulo">{{titulo}}</th>
        
            Nesta parte estamos definindo uma classe que faz aparecer uma maozinha nos "titulos" do cabecalho. Estamos criando o enevento [onClick] para cada
            [tituloo] e chamando o metodo [ordenaColuna] passando a coluna que foi clicada. (# -0 , [Título] - 1 e [Descrição] - 2). Assim na rotina (*05) saberemos
            qual a coluna que está sendo considerada na ordenação.

    (*02) - props:['titulos','itens','ordem','ordemcol','criar','detalhe','editar','deletar','token'],

            Foram criadas duas novas [props] (parâmetros) para serem passados para o componente: [ordem] que deve ter [asc] ou [desc] e [ordemcol] que deve
            conter [0, 1 ou 2] e depende do númerp de colunas da grid. O VEU não gosta quando mudamos os valores dos [props] por isso teremos que criar duas
            variaveis para trabalharamos com esses dois parâmetros.

    (*03) - ordemAux: this.ordem || "asc",

            Aqui estamos criando as duas variaveis que vão receber os valores das [props] e como não "DEVEMOS" modificar as [props] pois o VUE faz uma alerta quando
            isso acontece, vamos usar as duas variaveis para isso. Devemos ler esse comando: [ordemAux: this.ordem || "asc"], assim:
            A variavel ordemAux vai receber o valor da [props] this.ordem se na utilização do componente ela estiver definida e com valor. Caso não seja verdade a
            variavel vai receber o valor "asc" como padrão. O mesmo serve para ordemCol.

    (*04) - ordenaColuna: function(coluna){

            O objetivo deste metodo é receber o click do usuario na coluna desejada e alterar os valores das variaveis ordemCol guardando a coluna onde aconteceu o 
            click e ordemAux alternando entre [asc] e [desc] a cada click na coluna. Essas duas variaveis serã usadas na rotina de ordenação

    (*05) - let ordem = this.ordemAux;

            Nesta parate estamos apenas criando duas variaveis locais da rotina e garantindo que elas tenham valores adequados para a utilização abaixo. Atenção
            principalmente a transformação em inteiro.

    (*06) - if(ordem == "asc"){
              this.itens.sort(function(a,b){

            Podemos ter ordenação em ordem [asc] ou [desc] mudando apenas o operador de [> e <]. O comando [this.itens.sort] vai pedir uma função que execute 
            a ordenação. Esta função deve receber dois parametros no caso [a e b] onde [a] e [b] são elementos de [itens] que serão [sorteados]. Então 
            [a] em um momento será por exemplo [1,'PHP OO','Curso de PHP OO'], e [b] será um outro elemento. Por isso usaremos a[ordemCol] para escolher qual
            desses elementos de [a] será usado na comparação. A função deve retornar uma valor positivo quando [a] for maior que [b], um valor negativo quando 
            [a] for menor que [b] e zero quando ambos forem iguais. Trocando esses valores temos a mudança de ordenação.





23) Criando o Componente Para Navegação (Migalhas)
     - Essa aula será explicada na aula (24). Basicamente consiste na criação de um componente que aparece no inicio da pagina indicando o caminho que você
       fez até chegar nesta pagina e disponibilizando "links" para que voce possa voltar sem precisar clicar no botão [voltar] do brwoser.
       Ex: [Inicio / Cadastro / Fonecedor] Inicio e Cadastro são links que você pode voltar e neste momento você esta na página de Fornecedor 


24) Finalizando o Componente Migalhas
     - Vamos mostrar as alterações e os arquivos 

     1 - Vamos na view e colocamos a utilização do componente (claro que primeiro devemos criar e registrar o componente mas deixei essa parte para deposi).

               arquivo => [resources\views\home.blade.php]

               @extends('layouts.app')

               @section('content')
                 <pagina tamanho="10">
                   <painel titulo="Dashboard">

     (*01)           <migalhas v-bind:lista="{{$listaMigalhas}}"></migalhas>

                     <div class="row">
                       <div class="col-md-4">
                         <caixa qtd="80" titulo="Artigos" url="{{route('artigos.index')}}" cor="orange" icone="ion ion-pie-graph"></caixa>
                       </div>
                       <div class="col-md-4">
                         <caixa qtd="1500" titulo="Usuários" url="#" cor="blue" icone="ion ion-person-stalker"></caixa>
                       </div>
                       <div class="col-md-4">
                         <caixa qtd="3" titulo="Autores" url="#" cor="red" icone="ion ion-person"></caixa>
                       </div>
                     </div>
                   </painel>

                 </pagina>
               @endsection

     (*01) - <migalhas v-bind:lista="{{$listaMigalhas}}"></migalhas>

             A primeira pergunta que devemos fazer é: De onde vem o $listaMigalhas ?
             A resposta é do Controller dessa View. Então vamos ver só a parte que alterou do Controller.
             Um detalhe: O controller é código PHP e a view é código VUE  então um Array do PHP está sendo passado para a VUE
             
     2 - Agora vamos no controller que gerencia a view e vamos criar um array de array contendo TODO o caminho que existe da página inicial da aplicação
         até a view em questão. Como está view é a pagina inicial nosso array de array só tem um elemento.
         Para cada nivel dentro da estrutura de páginas esse array vai conter mais ou menos elementos.

               arquivo => [app\Http\Controllers\HomeController.php]


     (*02)      public function index()
                {
                  $listaMigalhas = json_encode([
                    ["titulo"=>"Home","url"=>""]
                  ]);

                    return view('home',compact('listaMigalhas'));
                }


     (*02) - public function index()
             
             Este é o metodo que corresponde a view. Como o vetor criado é PHP (Vetor do Tipo Key=>Value) ele não poderia ser visto no VUE (javascript) 
             então usamos a rotina json_encode que transforma esse vetor em uma estrutura json e essa estrtura é passada para a view no 
             comando [view('home',compact('listaMigalhas'))] onde a rotina [compact] deve fazer algum tipo de compactação. Observe que cada elemento do
             vetor possui dois atributos: O Titulo e a URL. O titulo sempre estará preenchido ja a URL só não estará preenchida se estivermos na pagina. 
             Exemplo:

               arquivo => [app\Http\Controllers\Admin\ArtigosController.php]

                      public function index()
                      {

                        $listaMigalhas = json_encode([
                          ["titulo"=>"Home","url"=>route('home')],
                          ["titulo"=>"Lista de Artigos","url"=>""]
                        ]);

                        return view('admin.artigos.index',compact('listaMigalhas'));
                      }

             No Exemplo estamos na página [Lista de Artigos] e chegamos nestá página vindos da página [home] então observe que a [url] de Lista de
             Artigos está vazia (pois estamos na view dessa página) mas a [url] da pagina [Home] está preenchido com o comando [route('home')] que
             retorna um link exatamente para a pagina home.



     3 - Vamos mostrar o componente e depois as views onde ele foi utilizado. Claro que o componente foi registrado em [resources\assets\js\app.js]
         O Parâmetro passado na utilização cai na [props] lista. A class Bootstrap [breadcrumb] formata o aspecto de lista colocando [XXXXXX / YYYYYY / ZZZZZZ]
         a barra [/] é colocada por essa class. Depois para cada [item] na [lista] (e observe que [item] possui [titulo] e [url]), se existir a [url] será construido
         um [link] [a href] senão será usado um [<span>]. Chamo a atenção para a criação de [method] chamado [defineClass] usado para retornar a classe que será
         usada nos link. Eu deixei como forma de exemplo pois o metodo não era necessário. Bastava colocar a class [label label-success] na tag [<a href>]
         No exemplo do curso não estava funcionando por isso deixei esse exemplo que funciona.

                  <template>
                    <ol class="breadcrumb">
                      <li v-for="(item, index) in lista" :key=index>
                         <a v-if="item.url" v-bind:class="defineClass(item)"
                                            v-bind:href="item.url">{{item.titulo}}
                         </a>
                         <span class="label label-warning"  v-if="!item.url">{{item.titulo}}
                         </span>
                       </li>
                    </ol>
                  </template>

                  <script>
                      export default {
                        props:['lista'],

                        methods:{
                          defineClass: function(item){
                              return "label label-success";
                          }
                        }
                      }
                  </script>


     4 - <migalhas v-bind:lista="{{$listaMigalhas}}"></migalhas> Na utilização usamos o mesmo nome do PHP ($listaMigalhas) vai cair na props [lista]


25) Componente Modal
    
    - Este componente foi obtido do Bootstrap. O objetivo dele é criar uma janela Modal onde vamos colocar os nossos formulários para fazer vários CRUDs 
    - Este componente vai estar ligado ao componente modallink. O modallink nada mais é um botão que possui um atributo que faz a ligação com o Id do 
      componente modal. Dessa forma quando clicamos no botão ele sabe qual a janela modal que deve ser aberta.
    - Nesta aula vamos criar o componente modal e fazer um teste. O modallink será criado na Aula 26.
    - O processo para criar componente é o mesmo e devemos registra-los no [resources\assets\js\app.js]

    - [resources\assets\js\components\modal\Modal.vue] [v-bind:id="nome"] permite a ligação entre o componente Modal e ModalLink é uma [props]

         <template>
           <div v-bind:id="nome" class="modal fade" tabindex="-1" role="dialog" v-bind:aria-labelledby="nome">
             <div class="modal-dialog modal-lg" role="document">
               <div class="modal-content">
                 <slot></slot>
               </div>
             </div>
           </div>
         </template>

         <script>
             export default {
               props:['nome']

             }
         </script>
    
    - [resources\assets\js\components\modal\ModalLink.vue] (Não sei se essa é a versão final. Só na próxima aula para saber) 
      v-bind:data-target="'#' + nome" (aqui no ModalLink fazemos a Ligação com o Modal. Temos que usar o mesmo [nome] nas props dos dois componentes
      (Pelo tipo podemos ter ou Button ou Link (Se nada for informado fica Button)

         <template>
           <div class="">
             <button v-if="!tipo || (tipo != 'button' && tipo != 'link')"
                     type="button" class="btn btn-primary" data-toggle="modal" v-bind:data-target="'#' + nome">{{titulo}}</button>
             <button v-if="tipo == 'button'"
                     type="button" class="btn btn-primary" data-toggle="modal" v-bind:data-target="'#' + nome">{{titulo}}</button>
             <a v-if="tipo == 'link'"
                     href="#" data-toggle="modal" v-bind:data-target="'#' + nome">{{titulo}}</a>
           </div>

         </template>

         <script>
             export default {
               props:['tipo','nome','titulo']
             }
         </script>

    - [resources\views\admin\artigos\index.blade.php] (Mostra a utilização de Modal e ModalLink) É apenas um teste esse arquivo não ficará assim
    
    - [<modallink tipo="link" nome="meuModalTeste" titulo="Formulário"></modallink>] Utilização do ModalLink. Atenção ao [nome="meuModalTeste"] pois
      esse mesmo parâmetro tem que ser usado no exemplo do Modal mais abaixo.
    - [<modal nome="meuModalTeste">] Utilização do Modal (logo abaixo). Podemos ver o mesmo nome do modallink. O <form> foi pego como exemplo no BootStrap
      e como o <form> ficou mal arrumado na tela foi colocado um componente <painel> para ajeita-lo.
    - Atenção ao comando [<input type="file" id="exampleInputFile">] ele já abre uma janela para que você escolha um arquivo (nunca tinha visto)



         @extends('layouts.app')

         @section('content')
           <pagina tamanho="12">
             <painel titulo="Lista de Artigos">

               <migalhas v-bind:lista="{{$listaMigalhas}}"></migalhas>



               <modallink tipo="link" nome="meuModalTeste" titulo="Formulário"></modallink>



               <tabela-lista
               v-bind:titulos="['#','Título','Descrição']"
               v-bind:itens="[
                               [1,'PHP OO','Curso de PHP OO'],
                               [2,'Vue JS','Curso de Vue JS'],
                               [3,'Curso A','Curso de A'],
                               [4,'Curso D','Curso de D'],
                               [5,'Curso G','Curso de G'],
                               [6,'Curso C','Curso de C'],
                               [7,'Curso W','Curso de W'],
                               [8,'Curso N','Curso de N'],
                               [9,'Curso L','Curso de L'],
                               [10,'Curso B','Curso de B'],
                               [11,'Curso Q','Curso de Q'],
                               [12,'Curso E','Curso de E'],
                               [13,'Curso T','Curso de T'],
                               [14,'Curso H','Curso de H'],
                               [15,'Curso X','Curso de X'],
                               [16,'Curso O','Curso de O'],
                               [17,'Curso I','Curso de I'],
                               [18,'Curso K','Curso de K'],
                               [19,'Curso Y','Curso de Y'],
                               [20,'Curso P','Curso de P']
                             ]"

               ordem="desc" ordemcol="1"
               criar="#criar" detalhe="#detalhe" editar="#editar" deletar="#deletar" token="7887522323"


               ></tabela-lista>

             </painel>

           </pagina>


           <modal nome="meuModalTeste">

             <painel titulo="Adicionar">
             <form>
               <div class="form-group">
                 <label for="exampleInputEmail1">Email address</label>
                 <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
               </div>
               <div class="form-group">
                 <label for="exampleInputPassword1">Password</label>
                 <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
               </div>
               <div class="form-group">
                 <label for="exampleInputFile">File input</label>
                 <input type="file" id="exampleInputFile">
                 <p class="help-block">Example block-level help text here.</p>
               </div>
               <div class="checkbox">
                 <label>
                   <input type="checkbox"> Check me out
                 </label>
               </div>
               <button type="submit" class="btn btn-default">Submit</button>
             </form>

             </painel>

           </modal>

         @endsection


26) Componente ModalLink
    - [resources\assets\js\components\modal\ModalLink.vue] Esta é a versão final
      v-bind:data-target="'#' + nome" (aqui no ModalLink fazemos a Ligação com o Modal. Temos que usar o mesmo [nome] nas props dos dois componentes
      (Pelo tipo podemos ter ou Button ou Link (Se nada for informado fica Button)
    - Foi incluido o parâmetro [css]

            <template>
              <div class="">
                <button v-if="!tipo || (tipo != 'button' && tipo != 'link')"
                        type="button" v-bind:class="css || 'btn btn-primary'"
                        data-toggle="modal"
                        v-bind:data-target="'#' + nome"> {{titulo}}</button>
                <button v-if="tipo == 'button'"
                        type="button" v-bind:class="css || 'btn btn-primary'"
                        data-toggle="modal"
                        v-bind:data-target="'#' + nome"> {{titulo}}</button>
                <a v-if="tipo == 'link'"
                        href="#" v-bind:class="css || ''"
                        data-toggle="modal"
                        v-bind:data-target="'#' + nome">{{titulo}}</a>
              </div>

            </template>

            <script>
                export default {
                  props:['tipo','nome','titulo','css']
                }
            </script>


27) Componente Formulário
    - [resources\assets\js\components\Formulario.vue] O componente formulário já está ajustado para o padrão Laravel. Ele controla o tipo do Verbo
      principalmente se for [PUT] ou [DELETE], através de um campo [Hidden] e ele possui o [token] que é necessário para o laravel
    - O Exemplo da utilização mudou um pouco já que agora apresenta campos do nosso formulário de artigos.


         <template>
           <form v-bind:class="css" v-bind:action="action" v-bind:method="defineMethod" v-bind:enctype="enctype">
             <input v-if="alterMethod" type="hidden" name="_method" v-bind:value="alterMethod">
             <input v-if="token" type="hidden" name="_token" v-bind:value="token">
             <slot></slot>

           </form>

         </template>

         <script>
             export default {
               props:['css','action','method','enctype','token'],

               data: function(){
                 return {
                   alterMethod:""
                 }
               },

               computed:{
                 defineMethod: function(){
                   if(this.method.toLowerCase() == "post" || this.method.toLowerCase() == "get"){
                     return this.method.toLowerCase();
                   }

                   if(this.method.toLowerCase() == "put" ){
                     this.alterMethod = "put";
                   }
                   if(this.method.toLowerCase() == "delete" ){
                     this.alterMethod = "delete";
                   }

                   return "post";

                 }
               }
             }
         </script>


    - [resources\views\admin\artigos\index.blade.php] A utilização do componente formulário

         @extends('layouts.app')

         @section('content')
           <pagina tamanho="12">
             <painel titulo="Lista de Artigos">

               <migalhas v-bind:lista="{{$listaMigalhas}}"></migalhas>



               <modallink tipo="link" nome="meuModalTeste" titulo="Formulário"></modallink>



               <tabela-lista
               v-bind:titulos="['#','Título','Descrição']"
               v-bind:itens="[
                               [1,'PHP OO','Curso de PHP OO'],
                               [2,'Vue JS','Curso de Vue JS'],
                               [3,'Curso A','Curso de A'],
                               [4,'Curso D','Curso de D'],
                               [5,'Curso G','Curso de G'],
                               [6,'Curso C','Curso de C'],
                               [7,'Curso W','Curso de W'],
                               [8,'Curso N','Curso de N'],
                               [9,'Curso L','Curso de L'],
                               [10,'Curso B','Curso de B'],
                               [11,'Curso Q','Curso de Q'],
                               [12,'Curso E','Curso de E'],
                               [13,'Curso T','Curso de T'],
                               [14,'Curso H','Curso de H'],
                               [15,'Curso X','Curso de X'],
                               [16,'Curso O','Curso de O'],
                               [17,'Curso I','Curso de I'],
                               [18,'Curso K','Curso de K'],
                               [19,'Curso Y','Curso de Y'],
                               [20,'Curso P','Curso de P']
                             ]"

               ordem="desc" ordemcol="1"
               criar="#criar" detalhe="#detalhe" editar="#editar" deletar="#deletar" token="7887522323"


               ></tabela-lista>

             </painel>

           </pagina>


           <modal nome="meuModalTeste">

             <painel titulo="Adicionar">
 
               <formulario css="" action="#" method="put" enctype="multipart/form-data" token="12345">

                 <div class="form-group">
                   <label for="titulo">Título</label>
                   <input type="text" class="form-control" id="titulo" name="titulo" placeholder="Título">
                 </div>
                 <div class="form-group">
                   <label for="descricao">Descrição</label>
                   <input type="text" class="form-control" id="descricao" name="descricao" placeholder="Descrição">
                 </div>
                 <button class="btn btn-info">Adicionar</button>
               </formulario>
             </painel>

           </modal>

         @endsection


28) Refatorando o componente TabelaLista
    - Os dados utilizados no componente TabelaLista estavam sendo definidos dentro [resources\views\admin\artigos\index.blade.php] como um array de array fixo.
      Na verdade esses dados devem vir do Banco de Dados. Então vamos tirar eles da view de artigos e coloca-los no controller de artigos. Essa não é a alteração
      final porque eles ainda estão fixos. Mais tarde o Controllador vai solicitar esses dados ao BD e ai sim estará como  uma aplicação normal.

    - Devido a essa mudança o componente de TabelaLista teve que mudar algumas linhas [resources\assets\js\components\TabelaLista.vue]

         <template>
           <div>

             <div class="form-inline">
               <a v-if="criar" v-bind:href="criar">Criar</a>
               <div class="form-group pull-right">
                 <input type="search" class="form-control" placeholder="Buscar" v-model="buscar" >
               </div>
             </div>

             <table class="table table-striped table-hover">
               <thead>
                 <tr>
                   <th style="cursor:pointer" v-on:click="ordenaColuna(index)" v-for="(titulo,index) in titulos" :key=titulo>{{titulo}}</th>

                   <th v-if="detalhe || editar || deletar">Ação</th>
                 </tr>
               </thead>
               <tbody>
                 <tr v-for="(item,index) in lista" :key=index>
                   <td v-for="i in item" :key=i>{{i}}</td>

                   <td v-if="detalhe || editar || deletar">
                     <form v-bind:id="index" v-if="deletar && token" v-bind:action="deletar" method="post">
                       <input type="hidden" name="_method" value="DELETE">
                       <input type="hidden" name="_token" v-bind:value="token">

                       <a v-if="detalhe" v-bind:href="detalhe">Detalhe |</a>
                       <a v-if="editar" v-bind:href="editar"> Editar |</a>

                       <a href="#" v-on:click="executaForm(index)"> Deletar</a>

                     </form>
                     <span v-if="!token">
                       <a v-if="detalhe" v-bind:href="detalhe">Detalhe |</a>
                       <a v-if="editar" v-bind:href="editar"> Editar |</a>
                       <a v-if="deletar" v-bind:href="deletar"> Deletar</a>
                     </span>
                     <span v-if="token && !deletar">
                       <a v-if="detalhe" v-bind:href="detalhe">Detalhe |</a>
                       <a v-if="editar" v-bind:href="editar"> Editar</a>
                     </span>


                   </td>
                 </tr>


               </tbody>

             </table>

           </div>

         </template>

         <script>
             export default {
               props:['titulos','itens','ordem','ordemcol','criar','detalhe','editar','deletar','token'],
               data: function(){
                 return {
                   buscar:'',
                   ordemAux: this.ordem || "asc",
                   ordemAuxCol: this.ordemcol || 0
                 }
               },
               methods:{
                 executaForm: function(index){
                   document.getElementById(index).submit();
                 },
                 ordenaColuna: function(coluna){
                   this.ordemAuxCol = coluna;
                   if(this.ordemAux.toLowerCase() == "asc"){
                     this.ordemAux = 'desc';
                   }else{
                     this.ordemAux = 'asc';
                   }
                 }
               },
               computed:{
                 lista:function(){

                   let ordem = this.ordemAux;
                   let ordemCol = this.ordemAuxCol;
                   ordem = ordem.toLowerCase();
                   ordemCol = parseInt(ordemCol);

                   if(ordem == "asc"){
                     this.itens.sort(function(a,b){
    (*01)              if (Object.values(a)[ordemCol] > Object.values(b)[ordemCol] ) { return 1;}
                       if (Object.values(a)[ordemCol] < Object.values(b)[ordemCol] ) { return -1;}
                       return 0;
                     });
                   }else{
                     this.itens.sort(function(a,b){
                       if (Object.values(a)[ordemCol] < Object.values(b)[ordemCol] ) { return 1;}
                       if (Object.values(a)[ordemCol] > Object.values(b)[ordemCol] ) { return -1;}
                       return 0;
                     });
                   }

    (*02)          if(this.buscar){
                     return this.itens.filter(res => {
                       for(let k = 0;k < res.length; k++){
                         if((res[k] + "").toLowerCase().indexOf(this.buscar.toLowerCase()) >= 0){
                           return true;
                         }
                       }
                       return false;

                     });
                   }


                   return this.itens;
                 }
               }
             }
         </script>

     (*01) - Para se obter o acesso ao array de elementos de uma linha do grid é preciso usar uma função do javascript Object.values(vetor)
     (*02) - Foi necessário testar para ver se o campo buscar possuia alguma informação para que pudessemos fazer a busca

    - Agora sem o array de array definido diretamente dentro da view ficou assim [resources\views\admin\artigos\index.blade.php]
      Observe que o componente <tabela-lista> agora não tem mais o array de array fixo e sim uma variavel [$listaArtigos]

         @extends('layouts.app')

         @section('content')
           <pagina tamanho="12">
             <painel titulo="Lista de Artigos">

               <migalhas v-bind:lista="{{$listaMigalhas}}"></migalhas>



               <modallink tipo="link" nome="meuModalTeste" titulo="Formulário"></modallink>



               <tabela-lista
                     v-bind:titulos="['#','Título','Descrição']"

                     v-bind:itens="{{$listaArtigos}}"


                     ordem="desc" ordemcol="1"
                     criar="#criar" detalhe="#detalhe" editar="#editar" deletar="#deletar" token="7887522323"
               ></tabela-lista>

             </painel>

           </pagina>


           <modal nome="meuModalTeste">
             <painel titulo="Adicionar">
               <formulario css="" action="#" method="put" enctype="multipart/form-data" token="12345">

                 <div class="form-group">
                   <label for="titulo">Título</label>
                   <input type="text" class="form-control" id="titulo" name="titulo" placeholder="Título">
                 </div>
                 <div class="form-group">
                   <label for="descricao">Descrição</label>
                   <input type="text" class="form-control" id="descricao" name="descricao" placeholder="Descrição">
                 </div>
                 <button class="btn btn-info">Adicionar</button>
               </formulario>
             </painel>

           </modal>

         @endsection

    - Agora o controller de artigos passa a ter o array de array (por enquanto ainda fixo)
      [app\Http\Controllers\Admin\ArtigosController.php]


         <?php

         namespace App\Http\Controllers\Admin;

         use Illuminate\Http\Request;
         use App\Http\Controllers\Controller;

         class ArtigosController extends Controller
         {
             /**
              * Display a listing of the resource.
              *
              * @return \Illuminate\Http\Response
              */
             public function index()
             {

               $listaMigalhas = json_encode([
                 ["titulo"=>"Home","url"=>route("home")],
                 ["titulo"=>"Lista de Artigos","url"=>""]
               ]);


               $listaArtigos = json_encode([
                                     ["id"=>1,"titulo"=>"PHP OO","descricao"=>"Curso de PHP OO"],
                                     ["id"=>2,"titulo"=>"Vue JS","descricao"=>"Curso de Vue JS"],
                                     ["id"=>3,"titulo"=>"Curso A","descricao"=>"Curso de A"],
                                     ["id"=>4,"titulo"=>"Curso D","descricao"=>"Curso de D"],
                                     ["id"=>6,"titulo"=>"Curso C","descricao"=>"Curso de C"],
                                     ["id"=>5,"titulo"=>"Curso G","descricao"=>"Curso de G"],
                                     ["id"=>7,"titulo"=>"Curso W","descricao"=>"Curso de W"],
                                     ["id"=>8,"titulo"=>"Curso N","descricao"=>"Curso de N"],
                                     ["id"=>9,"titulo"=>"Curso L","descricao"=>"Curso de L"],
                                     ["id"=>10,"titulo"=>"Curso B","descricao"=>"Curso de B"],
                                     ["id"=>11,"titulo"=>"Curso Q","descricao"=>"Curso de Q"],
                                     ["id"=>12,"titulo"=>"Curso E","descricao"=>"Curso de E"],
                                     ["id"=>13,"titulo"=>"Curso T","descricao"=>"Curso de T"],
                                     ["id"=>14,"titulo"=>"Curso H","descricao"=>"Curso de H"],
                                     ["id"=>15,"titulo"=>"Curso X","descricao"=>"Curso de X"],
                                     ["id"=>16,"titulo"=>"Curso O","descricao"=>"Curso de O"],
                                     ["id"=>17,"titulo"=>"Curso I","descricao"=>"Curso de I"],
                                     ["id"=>18,"titulo"=>"Curso K","descricao"=>"Curso de K"],
                                     ["id"=>19,"titulo"=>"Curso Y","descricao"=>"Curso de Y"],
                                     ["id"=>20,"titulo"=>"Curso P","descricao"=>"Curso de P"]
                                   ]);



               return view("admin.artigos.index",compact('listaMigalhas','listaArtigos'));
             }

             /**
              * Show the form for creating a new resource.
              *
              * @return \Illuminate\Http\Response
              */
             public function create()
             {
                 //
             }

             /**
              * Store a newly created resource in storage.
              *
              * @param  \Illuminate\Http\Request  $request
              * @return \Illuminate\Http\Response
              */
             public function store(Request $request)
             {
                 //
             }

             /**
              * Display the specified resource.
              *
              * @param  int  $id
              * @return \Illuminate\Http\Response
              */
             public function show($id)
             {
                 //
             }

             /**
              * Show the form for editing the specified resource.
              *
              * @param  int  $id
              * @return \Illuminate\Http\Response
              */
             public function edit($id)
             {
                 //
             }

             /**
              * Update the specified resource in storage.
              *
              * @param  \Illuminate\Http\Request  $request
              * @param  int  $id
              * @return \Illuminate\Http\Response
              */
             public function update(Request $request, $id)
             {
                 //
             }

             /**
              * Remove the specified resource from storage.
              *
              * @param  int  $id
              * @return \Illuminate\Http\Response
              */
             public function destroy($id)
             {
                 //
             }
         }


29) Opção de Modal dentro do Componente TabelaLista
    - Vamos alterar o componente Tabela Lista para que o mesmo possa ter a opção de chamar Links normais ou Janelas Modais nas ações Criar, Editar e Detalhe
      Nesse caso o [modallink] que antes estava na [view] agora vai passar para dentro do componente. Dessa forma vamos precisar de um novo parametro no
      [TabelaLista] para sabermos se continuamos a usar os "links normais" ou os [modais]
    - Vamos também criar as janelas modais para [adicionar] e [editar] 
    - Vamos colocar um parâmetro [modal] na lista de parâmteros do componente [TabelaLista] será usado para testar se existe ou não existe
      [resources\views\admin\artigos\index.blade.php]


            @extends('layouts.app')

            @section('content')
              <pagina tamanho="12">
                <painel titulo="Lista de Artigos">
                  <migalhas v-bind:lista="{{$listaMigalhas}}"></migalhas>



                  <tabela-lista
                      v-bind:titulos="['#','Título','Descrição']"
                      v-bind:itens="{{$listaArtigos}}"
                      ordem="desc" ordemcol="1"
                      criar="#criar" detalhe="#detalhe" editar="#editar" deletar="#deletar" token="7887522323"
                      modal="sim"
                  ></tabela-lista>

                </painel>

              </pagina>

              <modal nome="adicionar">
                <painel titulo="Adicionar">
                  <formulario css="" action="#" method="put" enctype="multipart/form-data" token="12345">

                    <div class="form-group">
                      <label for="titulo">Título</label>
                      <input type="text" class="form-control" id="titulo" name="titulo" placeholder="Título">
                    </div>
                    <div class="form-group">
                      <label for="descricao">Descrição</label>
                      <input type="text" class="form-control" id="descricao" name="descricao" placeholder="Descrição">
                    </div>
                    <button class="btn btn-info">Adicionar</button>
                  </formulario>
                </painel>
              </modal>


              <modal nome="editar">
                <painel titulo="Editar">
                  <formulario css="" action="#" method="put" enctype="multipart/form-data" token="12345">

                    <div class="form-group">
                      <label for="titulo">Título</label>
                      <input type="text" class="form-control" id="titulo" name="titulo" placeholder="Título">
                    </div>
                    <div class="form-group">
                      <label for="descricao">Descrição</label>
                      <input type="text" class="form-control" id="descricao" name="descricao" placeholder="Descrição">
                    </div>
                    <button class="btn btn-info">Atualizar</button>
                  </formulario>
                </painel>
              </modal>


            @endsection


    - Agora vamos usar o parâmetro [modal] para mudar o comportamento dos botões [criar] e [editar] no componente
      [resources\assets\js\components\TabelaLista.vue]


         <template>
           <div>

             <div class="form-inline">

               <a v-if="criar && !modal" v-bind:href="criar">Criar</a>
               <modallink v-if="criar && modal" tipo="link" nome="adicionar" titulo="Criar" css=""></modallink>

               <div class="form-group pull-right">
                 <input type="search" class="form-control" placeholder="Buscar" v-model="buscar" >
               </div>

             </div>

             <table class="table table-striped table-hover">
               <thead>
                 <tr>
                   <th style="cursor:pointer" v-on:click="ordenaColuna(index)" v-for="(titulo,index) in titulos" :key=titulo>{{titulo}}</th>

                   <th v-if="detalhe || editar || deletar">Ação</th>
                 </tr>
               </thead>
               <tbody>
                 <tr v-for="(item,index) in lista" :key=index>
                   <td v-for="i in item" :key=i>{{i}}</td>

                   <td v-if="detalhe || editar || deletar">
                     <form v-bind:id="index" v-if="deletar && token" v-bind:action="deletar" method="post">
                       <input type="hidden" name="_method" value="DELETE">
                       <input type="hidden" name="_token" v-bind:value="token">

                       <a v-if="detalhe" v-bind:href="detalhe">Detalhe |</a>

                       <a v-if="editar && !modal" v-bind:href="editar"> Editar |</a>
                       <modallink v-if="editar && modal" tipo="link" nome="editar" titulo=" Editar |" css=""></modallink>

                       <a href="#" v-on:click="executaForm(index)"> Deletar</a>

                     </form>
                     <span v-if="!token">
                       <a v-if="detalhe" v-bind:href="detalhe">Detalhe |</a>
                       <a v-if="editar && !modal" v-bind:href="editar"> Editar |</a>

                       <modallink v-if="editar && modal" tipo="link" nome="editar" titulo=" Editar |" css=""></modallink>
                       <a v-if="deletar" v-bind:href="deletar"> Deletar</a>

                     </span>

                     <span v-if="token && !deletar">
                       <a v-if="detalhe" v-bind:href="detalhe">Detalhe |</a>

                       <a v-if="editar && !modal" v-bind:href="editar"> Editar</a>
                       <modallink v-if="editar && modal" tipo="link" nome="editar" titulo=" Editar" css=""></modallink>

                     </span>


                   </td>
                 </tr>


               </tbody>

             </table>

           </div>

         </template>

         <script>
             export default {
               props:['titulos','itens','ordem','ordemcol','criar','detalhe','editar','deletar','token','modal'],
               data: function(){
                 return {
                   buscar:'',
                   ordemAux: this.ordem || "asc",
                   ordemAuxCol: this.ordemcol || 0
                 }
               },
               methods:{
                 executaForm: function(index){
                   document.getElementById(index).submit();
                 },
                 ordenaColuna: function(coluna){
                   this.ordemAuxCol = coluna;
                   if(this.ordemAux.toLowerCase() == "asc"){
                     this.ordemAux = 'desc';
                   }else{
                     this.ordemAux = 'asc';
                   }
                 }
               },
               computed:{
                 lista:function(){


                   let ordem = this.ordemAux;
                   let ordemCol = this.ordemAuxCol;
                   ordem = ordem.toLowerCase();
                   ordemCol = parseInt(ordemCol);

                   if(ordem == "asc"){
                     this.itens.sort(function(a,b){
                       if (Object.values(a)[ordemCol] > Object.values(b)[ordemCol] ) { return 1;}
                       if (Object.values(a)[ordemCol] < Object.values(b)[ordemCol] ) { return -1;}
                       return 0;
                     });
                   }else{
                     this.itens.sort(function(a,b){
                       if (Object.values(a)[ordemCol] < Object.values(b)[ordemCol] ) { return 1;}
                       if (Object.values(a)[ordemCol] > Object.values(b)[ordemCol] ) { return -1;}
                       return 0;
                     });
                   }

                   if(this.buscar){
                     return this.itens.filter(res => {
                       for(let k = 0;k < res.length; k++){
                         if((res[k] + "").toLowerCase().indexOf(this.buscar.toLowerCase()) >= 0){
                           return true;
                         }
                       }
                       return false;

                     });
                   }


                   return this.itens;
                 }
               }
             }
         </script>

30) Configurando o Veux
    - O VeuX é uma especie de container que permite armazenar dados (objetos, arrays) e que podem ser acessados facilmente de qualquer lugar da aplicação.
    - Usaremos o veux para passar dados entre os formulários da aplicação
    - Antes precisamos instalar o VueX para isso abra uma janela do DOS e na pasta da aplicação digite [npm install vuex --save-dev]
      Atenção: Mesmo que dê algumas mensagens na instalção do [vuex] deixe assim. Não instale os pacotes abaixo pois BUGOU a aplicação
      Deu algumas mensagens e tive que instalar outros pacotes como [npm install --save axios vue-axios] e [npm install ajv-keywords] 
      e também [npm install ajv] mas nem sei se funcionou. Estava dando erro na compilação mas depois dessas instalações funcionou.
    - Após instalar voce pode olhar as dependencias no arquivo [package.json]. O meu está diferente do professor. Ele não tem nenhuma [dependencies] ele só tem
      [devDependencies] mas vamos deixar assim para ver como fica.
    - Agora que o pacote já está importado vamos configura-lo no arquivo [resources\assets\js\app.js]
      Parece que esse arquivo [app.js] é a BASE da nossa aplicação ou seja o Arquivo que "STARTA" a aplicação. Então qualquer "pacote" que precisa ser usado em
      toda a aplicação deve ser colocado aqui.


         /**
          * First we will load all of this project's JavaScript dependencies which
          * includes Vue and other libraries. It is a great starting point when
          * building robust, powerful web applications using Vue and Laravel.
          */

         require('./bootstrap');

         window.Vue = require('vue');

 (*01)   import Vuex from 'Vuex';
 (*02)   Vue.use(Vuex);



         /**
          * Next, we will create a fresh Vue application instance and attach it to
          * the page. Then, you may begin adding components to this application
          * or customize the JavaScript scaffolding to fit your unique needs.
          */


          //Vuex

 (*03)    const store = new Vuex.Store({
            state:{
              item:{teste:"opa funcionou1"}
            },
            mutations:{
              setItem(state,obj){
                state.item = obj;
              }
            }
          });


         Vue.component('example-component', require('./components/ExampleComponent.vue'));

         Vue.component('topo', require('./components/Topo.vue'));
         Vue.component('painel', require('./components/Painel.vue'));
         Vue.component('caixa', require('./components/Caixa.vue'));
         Vue.component('pagina', require('./components/Pagina.vue'));
         Vue.component('tabela-lista', require('./components/TabelaLista.vue'));
         Vue.component('migalhas', require('./components/Migalhas.vue'));
         Vue.component('modal', require('./components/modal/Modal.vue'));
         Vue.component('modallink', require('./components/modal/ModalLink.vue'));
         Vue.component('formulario', require('./components/Formulario.vue'));



         const app = new Vue({
             el: '#app'.
 (*04)       store
         });

     (*01) - Neste import estamos dizendo que a aplicação vai usar o VueX cuja biblioteca foi adicionada ao aplicativo. 
             Parace que Vuex sem as aspas é o nome interno na aplicação e 'Vuex' é o nome da biblioteca adicionada à aplicação
     (*02) - Agora estamos dizendo que VueJs que é a base de nossa aplicação vai usar o Vuex (sem aspas)
     (*03) - Agora estamos contruindo o "container" que o professor gosta de chamar de loja para que possamos guardar as nossas informações.
             Na parte [state] definimos um objeto chamado [item]. Esse nome é generico pq vamos guardar todos os nossos dados aqui (em item) e
             se chamassemos de (artigos) ficaria estranho quando estivessemos guardando outro tipo de informação. Observe que Objetos possui a estrutura:
             [atributo:valor] e atributo e valor podem mudar quando você quiser. Neste exemplo: atributo=>[teste] e valor =>["opa funcionou1"]
             Na parte [mutations] escrevemos uma rotina que permite alterar o conteudo de item. Só não entendi pq precisa passar [state] para [setItem]
     (*04) - Disponibilizamos a nossa constante [store] para que possamos alterar o [item] que estão dentro de [store]. [store] é uma constante e
             não pode ser alterada. Agora o [item] dentro dela podem


    - Podemos usar [store] em qualquer lugar. Seja em código VUE ou no PHP (é claro)
      Podemos chegar no componente [TabelaLista] e escrever [<p>{{this.$store.state.item.teste}}</p>] que vai aparecer [opa funcionou1]. Observe que o
      Objeto [item] possui atributo [teste] e valor [opa funcionou1] mas tanto o atributo como o valor podem ser mudados ha qualquer hora.

    - Agora na hora de alterar o objeto podemos fazer (foi feito em uma rotina computed mas acredito que possa ser feito em qualquer Lugar)

      this.$store.commit('setItem',{opa:"Ok});   

      Neste caso o commit permite acesso ao metodo [setItem] e nesse caso estamos passando um novo objeto para item que possui atributo [opa] e valor [Ok]
      destruindo completamente o objeto anterior.

    - Vamos apagar o [teste] e o [opa funcionou1] deixando item assim [item:{}] para que a aplicação possa usar



31) Preenchendo o Formulário de Editar
    - Vamos usar o [$store] para passar as informações entre os formulários.

    - 01 - Vamos no componente [resources\assets\js\components\TabelaLista.vue] e vamos alterar o componente [modallink] para passar um 
      novo parâmetro que será o [item]

              <modallink v-if="editar && modal" v-bind:item="item" tipo="link" nome="editar" titulo=" Editar |" css=""></modallink>

      Observe que agora tem o parametro [v-bind:item="item"] que é o [item] do [v-for]. Agora temos que alterar o componente [modallink]

    - 02 - Alterando o componente [resources\assets\js\components\modal\ModalLink.vue] para ter um novo parametro e guardar o [item] na [$store]

            <template>
              <span>
                <span v-if="item">
                  <button v-on:click="preencheFormulario()" v-if="!tipo || (tipo != 'button' && tipo != 'link')" type="button" v-bind:class="css || 'btn btn-primary'" data-toggle="modal" v-bind:data-target="'#' + nome">{{titulo}}</button>
                  <button v-on:click="preencheFormulario()" v-if="tipo == 'button'" type="button" v-bind:class="css || 'btn btn-primary'" data-toggle="modal" v-bind:data-target="'#' + nome">{{titulo}}</button>
                  <a v-on:click="preencheFormulario()" v-if="tipo == 'link'" href="#" v-bind:class="css || ''" data-toggle="modal" v-bind:data-target="'#' + nome">{{titulo}}</a>
                </span>

                <span v-if="!item">
                  <button v-if="!tipo || (tipo != 'button' && tipo != 'link')" type="button" v-bind:class="css || 'btn btn-primary'" data-toggle="modal" v-bind:data-target="'#' + nome">{{titulo}}</button>
                  <button v-if="tipo == 'button'" type="button" v-bind:class="css || 'btn btn-primary'" data-toggle="modal" v-bind:data-target="'#' + nome">{{titulo}}</button>
                  <a v-if="tipo == 'link'" href="#" v-bind:class="css || ''" data-toggle="modal" v-bind:data-target="'#' + nome">{{titulo}}</a>
                </span>

              </span>

            </template>

            <script>
                export default {
                  props:['tipo','nome','titulo','css','item'],
                  methods:{
                    preencheFormulario:function(){
                      this.$store.commit('setItem',this.item);
                    }
                  }
                }
            </script>

    - 03 - Observe que tive que separa o [botão ou link] em dois [span] um se tiver [item] e outro se não tiver. No que tem item fizemos uma rotina que ao clicar 
           no [botão ou link] ele chama a rotina [preencheFormulario~] que na verdade guarda o [item] na [$store]

    - 04 - Agora é só alterar os formularios em [resources\views\admin\artigos\index.blade.php] colocando um [v-model] para mostrar a informação que já está em [$store]
           escolhendo o [atributo] desejado.

             <input type="text" class="form-control" id="titulo" name="titulo" v-model="$store.state.item.titulo" placeholder="Título">

             <input type="text" class="form-control" id="descricao" name="descricao" v-model="$store.state.item.descricao" placeholder="Descrição">

**************************************************************************************************************************************************************
**************************************************************************************************************************************************************
*
* Algumas instalações que fiz estavam erradas o que BUGOU a aplicação então tive que voltar ao inicio criar a aplicação do zero e fazer algumas instalações
* em seguida baixei a aula 31 e copiei quase todos os arquivos
*
**************************************************************************************************************************************************************
**************************************************************************************************************************************************************


32) Exibindo o Modal de Detalhe

    - 01 - Alterar [resources\assets\js\components\TabelaLista.vue] colocando os links para [detalhe] da mesma forma que foi feito para os [edit]
           Observe que o [item] é passado como parâmetro para o componente [modallink] em [v-bind:item="item"]

              <a v-if="detalhe && !modal" v-bind:href="detalhe">Detalhe |</a>
              <modallink v-if="detalhe && modal" v-bind:item="item" tipo="link" nome="detalhe" titulo=" Detalhe |" css=""></modallink>

    - 02 - Alterar [resources\views\admin\artigos\index.blade.php] colocando a janela [modal] para detalhe. Quase idêntica a [Edit] só que não precisa de
           formulário. 0 [@] permite acessar uma váriavel [PHP] dentro do VUE

                 <modal nome="detalhe">
                     <painel v-bind:titulo="$store.state.item.titulo">
                       <p>@{{$store.state.item.descricao}}</p>
                     </painel>
                 </modal>



33) Modificando o Modal e a Lógica de Busca
    - 01 - A Lógica de Busca deixou de funcionar após algumas mudancas. Então vamos consertar e modificar o componente [Modal] colocando uns botões e a opção de fechar
    - 02 - Pegamos um novo Modal do BootStrap e o nosso componente [resources\assets\js\components\modal\Modal.vue] ficou assim

            <template>

              <div class="modal fade" v-bind:id="nome" tabindex="-1" role="dialog">
              <div class="modal-dialog" role="document">
                <div class="modal-content">
                  <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">{{titulo}}</h4>
                  </div>
                  <div class="modal-body">
                    <slot></slot>
                  </div>
                  <div class="modal-footer">
                    <slot name="botoes"></slot>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                  </div>
                </div>
              </div>
            </div>
            </template>

            <script>
                export default {
                  props:['nome','titulo']

                }
            </script>


    - 03 - Alguns detalhes:

           <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
           Esse botão usa jquery para fechar uma janela modal

           <slot name="botoes"></slot>
           Agora temos um [slot] identificável para diferenciar do [slot] anterior que não possui [name]

           props:['nome','titulo']
           Passamos a ter um novo parâmetro [titulo]

           Devido as essas modificações precisamos mudar a utilização do componente modal no [resources\views\admin\artigos\index.blade.php]
           Só vou colocar um pois os outros seguem o mesmo padrão (exceto detalhe que não tem muitas mudanças)

                 <modal nome="adicionar" titulo="Adicionar">
                     <formulario id="formAdicionar" css="" action="#" method="put" enctype="multipart/form-data" token="12345">
                 
                       <div class="form-group">
                         <label for="titulo">Título</label>
                         <input type="text" class="form-control" id="titulo" name="titulo" placeholder="Título">
                       </div>
                       <div class="form-group">
                         <label for="descricao">Descrição</label>
                         <input type="text" class="form-control" id="descricao" name="descricao" placeholder="Descrição">
                       </div>
                     </formulario>

                     <span slot="botoes">
                       <button form="formAdicionar" class="btn btn-info">Adicionar</button>
                     </span>
                 
                 </modal>

           [Modal] para a ter [Titulo]

           <button form="formAdicionar" class="btn btn-info">Adicionar</button>
           Esse botão é colocado no <span> com o slot identificado. O <formulario> todo está no outro slot sem identificação

           Foi colocado um [id] no formulario para que o [botão] [Adicionar] que está FORA da tag <formulario> possa ser associado ao [formulario]
           Então quando escrevemos [<button form="formAdicionar"] esse [form] tem que ter o mesmo [id] do [formulario]

    - 03 - Para corrigir o [buscar] devemos trasnformar o array [res] em um objeto (array) identico ao que foi feito com a ordenação.

           res = Object.values(res); 

34) Criando o Modelo e Tabela de Artigos

    - 01 - Vamos criar a nossa classe que vai representar a tabela de Artigos no Banco de dados. O Laravel cria atraves de um comando, a Classe e a Rotina de
           Migração (ou seja o comando que vai criar a tabela no BD)
           Na hora de definir a classe sempre colocamos no singular e a tabela sera criada no plural.

           Comando: [php artisan make:model Artigo -m]

           Artigo será o nome do [Model] (Classe) e [-m] para criar o arquivo de Migração.

           Foram criados dois arquivos: um com o Modelo [app\Artigo.php] e outro com a Migracao [database\migrations\2020_10_01_201241_create_artigos_table.php]

           É exatamente no programa da Migração que vamos construir a tabela.

           Aqui está o arquivo de modelo [app\Artigo.php]
           
               <?php

               namespace App;

               use Illuminate\Database\Eloquent\Model;
               use Illuminate\Database\Eloquent\SoftDeletes;

               class Artigo extends Model
               {
                   use SoftDeletes;

                   protected $fillable = ['titulo','descricao','conteudo','data'];

                   protected $dates = ['deleted_at'];
               }

           As linhas que inserimos foi [use Illuminate\Database\Eloquent\SoftDeletes;] e [uses softDeletes;]
           O primeiro permite o acesso a biblioteca e o segundo permite que o laravel faça uma "Deleção Lógica" ou seja, o registro não será realmente 
           deletado do BD e sim marcado.
           Para que isso funcione deve existir um campo na tabela que será usado na "Deleção Lógica". Esse campo é criado aqui no modelo com o comando
           [protected $dates = ['deleted_at'];] e no arquivo de migração (abaixo) com o comando [$table->softDeletes();]

           [protected $fillable = ['titulo','descricao','conteudo','data'];] representam os campos da tabelas que são definidos (quanto ao tipo) no arquivo
           de migração abaixo. Observe que [id] não faz parte de lista pois é padrão do laravel.



           Aqui está o arquivo de migracao [database\migrations\2020_10_01_201241_create_artigos_table.php]

               <?php

               use Illuminate\Support\Facades\Schema;
               use Illuminate\Database\Schema\Blueprint;
               use Illuminate\Database\Migrations\Migration;

               class CreateArtigosTable extends Migration
               {
                   /**
                    * Run the migrations.
                    *
                    * @return void
                    */
                   public function up()
                   {
   (*01)              Schema::create('artigos', function (Blueprint $table) {
                         $table->increments('id');
                         $table->string('titulo');
                         $table->string('descricao');
                         $table->text('conteudo');
                         $table->dateTime('data');
                         $table->timestamps();
                         $table->softDeletes();
                       });
                   }

                   /**
                    * Reverse the migrations.
                    *
                    * @return void
                    */
                   public function down()
                   {
   (*02)              Schema::dropIfExists('artigos');
                   }
               }

    (*01) - Nesse metodo up() é onde estamos criando a Tabela. O [$table->increments('id');] e [$table->timestamps();] 
            já existiam e deve ser padrão do laravel (o id como chave primaria e auto incremento e o timestamps com a informação da hora que o registro
            foi gravado), digitei apenas as outras linhas. Para saber os tipos que voce pode usar e inclusive se quiser dar um tamanho as [strings]
            você pode ir na documentação do laravel no endereço: [https://laravel.com/docs/5.5/migrations#introduction] e lá pro final da pagina tem uma tabela
            com todas as opções de campos.

    (*02) - Nesse metodo down() a tabela é "apagada" se existir

    - Agora podemos dar o comando que vai realmente criar a tabela (rodar o programa da migração) [php artisan migrate]

35) Corrigindo o Refresh da Pagina

    - Está havendo um delay quando carregamos a pagina. Isso acontece porque o Vue esta sendo carregado por último então demora um pouco até que toda a 
      tela esteja pronta. Para resolver isso.

      Nesse arquivo [resources\views\layouts\app.blade.php] é onde se inicia a aplicação. Dentro desse arquivo tem uma div e dentro dessa div é que todos os
      nossos componentes são renderizados.

      [<div id="app">] Logo abaixo do [<body>] então vamos colocar um estilo nessa [div] que vai suspender a exibição de todos os componentes dentro dela.
      Então ficou assim [<div id="app" style="display:none">] deste jeito some tudo.
      
      Agora vamos no arquivo que contem os comandos do Vue [resources\assets\js\app.js] e vamos escrever um código quando o Vue já estiver carregado.

      Atualmente está assim

            const app = new Vue({
                el: '#app',
                store
            });

      Vai Ficar assim:

            const app = new Vue({
                el: '#app',
                store,
                mounted: function() {
                  document.getElementById('app').style.display = "block";
                }
            });

      Agora não temos mais o delay e quando o vue é carregado tudo aparece


36) Adicionar e Listar Artigos

    - Nesta aula vamos fazer o create (adicionar) de artigos funcionar e gravar as informações do formulário no BD. Como na Tabela tem mais campos do que no formulário 
      precisamos alterar o formulário de [Adicionar]. Antes vamos colocar mais um campo (data) nos nossos dados para ver como vai ficar no Grid. Esses dados ainda estão
      fixos mas serão substituidos por uma busca ao BD. A alteração foi feita no arquivo [app\Http\Controllers\Admin\ArtigosController.php]


               $listaArtigos = json_encode([
                                     ["id"=>1,"titulo"=>"PHP OO","descricao"=>"Curso de PHP OO","data"=>"2012-10-20"],
                                     ["id"=>2,"titulo"=>"Vue JS","descricao"=>"Curso de Vue JS","data"=>"2013-10-20"],
                                     ["id"=>3,"titulo"=>"Curso A","descricao"=>"Curso de A","data"=>"2014-10-20"],
                                     ["id"=>4,"titulo"=>"Curso D","descricao"=>"Curso de D","data"=>"2015-10-20"],
                                     ["id"=>6,"titulo"=>"Curso C","descricao"=>"Curso de C","data"=>"2016-10-20"],
                                     ["id"=>5,"titulo"=>"Curso G","descricao"=>"Curso de G","data"=>"2017-10-20"],
                                     ["id"=>7,"titulo"=>"Curso W","descricao"=>"Curso de W","data"=>"2018-10-20"],
                                     ["id"=>8,"titulo"=>"Curso N","descricao"=>"Curso de N","data"=>"2019-10-20"],
                                     ["id"=>9,"titulo"=>"Curso L","descricao"=>"Curso de L","data"=>"2020-10-20"],
                                     ["id"=>10,"titulo"=>"Curso B","descricao"=>"Curso de B","data"=>"2021-10-20"],
                                     ["id"=>11,"titulo"=>"Curso Q","descricao"=>"Curso de Q","data"=>"2022-10-20"],
                                     ["id"=>12,"titulo"=>"Curso E","descricao"=>"Curso de E","data"=>"2023-10-20"],
                                     ["id"=>13,"titulo"=>"Curso T","descricao"=>"Curso de T","data"=>"2024-10-20"],
                                     ["id"=>14,"titulo"=>"Curso H","descricao"=>"Curso de H","data"=>"2025-10-20"],
                                     ["id"=>15,"titulo"=>"Curso X","descricao"=>"Curso de X","data"=>"2026-10-20"],
                                     ["id"=>16,"titulo"=>"Curso O","descricao"=>"Curso de O","data"=>"2027-10-20"],
                                     ["id"=>17,"titulo"=>"Curso I","descricao"=>"Curso de I","data"=>"2028-10-20"],
                                     ["id"=>18,"titulo"=>"Curso K","descricao"=>"Curso de K","data"=>"2029-10-20"],
                                     ["id"=>19,"titulo"=>"Curso Y","descricao"=>"Curso de Y","data"=>"2030-10-20"],
                                     ["id"=>20,"titulo"=>"Curso P","descricao"=>"Curso de P","data"=>"2031-10-20"]
                                   ]);

    - Claro que a exibição vai "bugar" pois não colocamos a coluna data no grid
    - Agora alterando a utilização do componente [tabela-lista] em [resources\views\admin\artigos\index.blade.php] e colocando a coluna [Data]

      <tabela-lista
         v-bind:titulos="['#','Título','Descrição','Data']"
         v-bind:itens="{{$listaArtigos}}"
         ordem="desc" ordemcol="1"
         criar="#criar" detalhe="#detalhe" editar="#editar" deletar="#deletar" token="7887522323"
         modal="sim"

      ></tabela-lista>


    - Agora vamos alterar o nosso formulário modal para conter todos os campos do BD. Foram incluidos os campos [conteudo] e [data]. Oserve o [type] do campo data
      e o [<textarea>] do [conteudo]. Observe também que o atributo [name] das tags são iguais aos nomes dos campos da tabela de artigos. 

    - Outra configuração importante é definir o [action], [method] e [token] na tag [<formulario>]
      [Action] colocamos [action="{{route('artigos.store')}}"] estamos usando o [route] do laravel e como definimos no arquivo [routes\web.php]
      o seguinte comando: [Route::resource('artigos', 'ArtigosController');] Estamos dizendo que o [apelido] ['artigos'] se refere ao [arquivo] ['ArtigosController']
      que é o arquivo [app\Http\Controllers\Admin\ArtigosController.php] então este [action] vai montar uma URL que Junto com o [Method] vai procurar o 
      [metodo store dentro de app\Http\Controllers\Admin\ArtigosController.php]

      Na documentação do Laravel tem uma tabela que diz que [URL] + [Method] indica qual rotina do arquivo de controller será executada.

      O [method] é [post] pois estamos enviando e o [token] usamos uma rotina do laravel [token="{{ csrf_token() }}"] que gera um token automaticamente.

      Parece que esse token é uma forma de evitar uma submissão de formulário de maneira errada.


      Arquivo [resources\views\admin\artigos\index.blade.php]


           <modal nome="adicionar" titulo="Adicionar">
             <formulario id="formAdicionar" css="" action="{{route('artigos.store')}}" method="post" enctype="" token="{{ csrf_token() }}">

               <div class="form-group">
                 <label for="titulo">Título</label>
                 <input type="text" class="form-control" id="titulo" name="titulo" placeholder="Título">
               </div>
               <div class="form-group">
                 <label for="descricao">Descrição</label>
                 <input type="text" class="form-control" id="descricao" name="descricao" placeholder="Descrição">
               </div>

               <div class="form-group">
                 <label for="conteudo">Conteúdo</label>
                 <textarea class="form-control" id="conteudo" name="conteudo" ></textarea>
               </div>

               <div class="form-group">
                 <label for="data">Data</label>
                 <input type="datetime-local" class="form-control" id="data" name="data">
               </div>

             </formulario>
             <span slot="botoes">
               <button form="formAdicionar" class="btn btn-info">Adicionar</button>
             </span>

           </modal>


    - Agora vamos só fazer um teste e ver o que está chegando no [metodo store] no arquivo [app\Http\Controllers\Admin\ArtigosController.php]

      com o comando [dd($request->all());] podemos ver tudo que está vindo com a requisição  

      Esse é o resultado do comando [dd]

            array:5 [▼
                 "_token" => "iXcXc8DvM3QI02LGEgVBAmHJsbaTAcIXmLIq7cQL"
                 "titulo" => "Falando sobre Laravel"
                 "descricao" => "Apresenta uma discussão sobre este framework"
                 "conteudo" => "AAAAAAA, BBBBBBBB, CCCCCCC DDDDDDDDDDDDDDDDD, EEEEEEEEEEEEEEEEEEE, FFF, GGGG"
                 "data" => "2020-10-03T08:35"
            ]

    - Então olhando que está chegando tudo certo. Podemos substituir o comando [DD} pelos comandos que vão salvar os dados no Banco.
    
           $data = $request->all();
           Artigo::create($data);

           return redirect()->back();     // Faz voltar a pagina anterior
     

      Observe que isso só é possível porque os campos dos formulário possuem os mesmos [nomes] dos [nomes] dos campos do Model (Artigo).
      feito com o comando [protected $fillable = ['titulo','descricao','conteudo','data'];] em [app\Artigo.php]

      Se não fosse assim teríamos que fazer:

            $data = $request->all();
            $artigo = new Artigo;
            $artigo->titulo = $data['titulo'];
            .....  (fazer o mesmo para todos os campos e no final
            $artigo->save();
            return redirect()->back();     // Faz voltar a pagina anterior
 
    - Podemos testar agora. E agora que já estamos salvando no BD precisamos no momento de apresentar o Grid, carregar os dados do BD e não de forma fixa
      como esta sendo agora. Então podemos trocar o comando 

               $listaArtigos = json_encode([
                                     ["id"=>1,"titulo"=>"PHP OO","descricao"=>"Curso de PHP OO","data"=>"2012-10-20"],
                                     ["id"=>2,"titulo"=>"Vue JS","descricao"=>"Curso de Vue JS","data"=>"2013-10-20"],
                                     ["id"=>3,"titulo"=>"Curso A","descricao"=>"Curso de A","data"=>"2014-10-20"],
                                     ["id"=>4,"titulo"=>"Curso D","descricao"=>"Curso de D","data"=>"2015-10-20"],
                                     ["id"=>6,"titulo"=>"Curso C","descricao"=>"Curso de C","data"=>"2016-10-20"],
                                     ["id"=>5,"titulo"=>"Curso G","descricao"=>"Curso de G","data"=>"2017-10-20"],
                                     ["id"=>7,"titulo"=>"Curso W","descricao"=>"Curso de W","data"=>"2018-10-20"],
                                     ["id"=>8,"titulo"=>"Curso N","descricao"=>"Curso de N","data"=>"2019-10-20"],
                                     ["id"=>9,"titulo"=>"Curso L","descricao"=>"Curso de L","data"=>"2020-10-20"],
                                     ["id"=>10,"titulo"=>"Curso B","descricao"=>"Curso de B","data"=>"2021-10-20"],
                                     ["id"=>11,"titulo"=>"Curso Q","descricao"=>"Curso de Q","data"=>"2022-10-20"],
                                     ["id"=>12,"titulo"=>"Curso E","descricao"=>"Curso de E","data"=>"2023-10-20"],
                                     ["id"=>13,"titulo"=>"Curso T","descricao"=>"Curso de T","data"=>"2024-10-20"],
                                     ["id"=>14,"titulo"=>"Curso H","descricao"=>"Curso de H","data"=>"2025-10-20"],
                                     ["id"=>15,"titulo"=>"Curso X","descricao"=>"Curso de X","data"=>"2026-10-20"],
                                     ["id"=>16,"titulo"=>"Curso O","descricao"=>"Curso de O","data"=>"2027-10-20"],
                                     ["id"=>17,"titulo"=>"Curso I","descricao"=>"Curso de I","data"=>"2028-10-20"],
                                     ["id"=>18,"titulo"=>"Curso K","descricao"=>"Curso de K","data"=>"2029-10-20"],
                                     ["id"=>19,"titulo"=>"Curso Y","descricao"=>"Curso de Y","data"=>"2030-10-20"],
                                     ["id"=>20,"titulo"=>"Curso P","descricao"=>"Curso de P","data"=>"2031-10-20"]
                                   ]);

      por

              $listaArtigos = json_encode(Artigo::all());

      Ao fazer isso todos os campos da tabela são jogados no Grid. Só que o Grid deve mostrar apenas o id, titulo, descricao e data. Então Artigo::all() deve ser
      substituido por:

              $listaArtigos = json_encode(Artigo::select('id', 'titulo', 'descricao', 'data')->get());

37) Validação com Laravel

    - Os campos do formulário Adicionar não estão sendo testados. Se nada for preenchido e for clicado no botão gravar vai ocorrer um erro no BD pois alguns
      campos da Tabela Artigos não aceitam null.
    - Vamos colocar validação do formulário. Para isso vamos no controller [app\Http\Controllers\Admin\ArtigosController.php] no método [store] e 
      inserimos o seguinte codigo:

             public function store(Request $request)
             {
                 //  dd($request->all());

    (*01)        $data = $request->all();

    (*02)        $validacao = \Validator::make($data,[
                   "titulo" => "required",
                   "descricao" => "required",
                   "conteudo" => "required",
                   "data" => "required",
                 ]);

    (*03)        if($validacao->fails()){
                   return redirect()->back()->withErrors($validacao)->withInput();
                 }

                 Artigo::create($data);
                 return redirect()->back();
             }

   (*01) - Obtemos todos os campos que vieram da requisição (do formulário) e colocamos dentro de [$data]
   (*02) - Criamos o objejo [$validacao] usando uma classe do Laravel [\Validator::make] (onde make é um método que recebe a requisição [$data] e um array
           [] com todos os atributos da requisição e o tipo de validação que desejamos. Só usamos ["required"] mas deve ser possivel fazer uma lista dos
           tipos de validação que desejamos (talvez com outro array de tipos de validação)
   (*03) - Se a validação falhar retornarmos para a tela anterior (ou seja o grid) com todos os erros da validação [->withErrors($validacao)] e preservando os
           dados que já foram digitados na tela de adicionar usando o comando [->withInput()]. Se não falhar salvamos os dados e retornarmos a tela anterior.
           para que o [->withInput()] funcione lá no formulário você vai ter que colocar uma propriedade em cada campo dizendo que deseja recuperar valores
           antigos.

           Então na view [resources\views\admin\artigos\index.blade.php] mudamos o formulario modal adicionar para o código abaixo:
           Alteramos os campos incluindo a propriedade [value="{{old('titulo')}}"] em todos os campos exceto no campo [textarea] já que o value é o próprio 
           conteudo do campo

                 <modal nome="adicionar" titulo="Adicionar">
                   <formulario id="formAdicionar" css="" action="{{route('artigos.store')}}" method="post" enctype="" token="{{ csrf_token() }}">

                     <div class="form-group">
                       <label for="titulo">Título</label>
                       <input type="text" class="form-control" id="titulo" name="titulo" placeholder="Título" value="{{old('titulo')}}">
                     </div>
                     <div class="form-group">
                       <label for="descricao">Descrição</label>
                       <input type="text" class="form-control" id="descricao" name="descricao" placeholder="Descrição" value="{{old('descricao')}}">
                     </div>

                     <div class="form-group">
                       <label for="conteudo">Conteúdo</label>
                       <textarea class="form-control" id="conteudo" name="conteudo" >{{old('conteudo')}}</textarea>
                     </div>

                     <div class="form-group">
                       <label for="data">Data</label>
                       <input type="datetime-local" class="form-control" id="data" name="data" value="{{old('data')}}">
                     </div>

                   </formulario>
                   <span slot="botoes">
                     <button form="formAdicionar" class="btn btn-info">Adicionar</button>
                   </span>

                 </modal>

             

           Alem disso precisamos escolher um local na visão para apresentar os erros caso eles ocorram. Então lá no topo da view colocamos:


              <pagina tamanho="12">

     (*01)      @if($errors->all())
                  <div class="alert alert-danger alert-dismissible text-center" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    @foreach ($errors->all() as $key => $value)
                      <li><strong>{{$value}}</strong></li>
                    @endforeach
                  </div>
                @endif

                <painel titulo="Lista de Artigos">
                  <migalhas v-bind:lista="{{$listaMigalhas}}"></migalhas>

    (*01) - O [@if] é um template do laravel chamado [blade] que permite colocar código [php] o mesmo para o @foreach
            Então se houve erros usamos umas classes do Bootstrap para construir uma janela e dentro do [@foreach] vamos listando cada erro com [{{$value}}]


38) Traduzindo Erros na Validação do Laravel

    - As mensagens apareceram em inglês para traduzi-las vamos seguir os seguintes passos. Vá no prompt do dos, na pasta da aplicação e digite os comandos numerados:

          Site onde você encontra a tradução (github)
          https://github.com/enniosousa/laravel-5.5-pt-BR-localization

    01)   cd resources/lang/
    02)   git clone https://github.com/enniosousa/laravel-5.5-pt-BR-localization.git ./pt-BR

          obs: Você pode remover o diretório .git para poder incluir
          e versionar os arquivos deste projeto no seu repositório:    

    03)   rm -rf pt-BR/.git/  (não funcionou. não existe rm no windows seria del mas não achei o .git na pasta)

    04)   Configurar o Framework para utilizar a linguagem como Default onde estiver ['locale' => 'en',] no arquivo [config\app.php]
          troque para ['locale' => 'pt-BR',]


39) requisição HTTP com o AXIOS

    - No grid não trazemos todos os dados. Só que no detalhe gostariamos de mostrar todos os dados então vamos fazer uma requisição ao Laravel que vai retornar
      um [json] com todos os dados.

    01 - Alterar o metodo show (responsável por buscar os dados) no [app\Http\Controllers\Admin\ArtigosController.php]
         colocando esse [return] que já vai retornar um [json]

          public function show($id)
          {
              return Artigo::find($id)
          }

    02 - Alterar a chamada ao componente [TabelaLista] colocando uma URL na opção de Detalhe. 
         Vamos alterar o Arquivo [resources\views\admin\artigos\index.blade.php]

               <tabela-lista
                  v-bind:titulos="['#','Título','Descrição','Data']"
                  v-bind:itens="{{$listaArtigos}}"
                  ordem="desc" ordemcol="1"
                  criar="#criar" detalhe="/admin/artigos/" editar="#editar" deletar="#deletar" token="7887522323"
                  modal="sim"

               ></tabela-lista>
        
    03 - Alterar o componente [resources\assets\js\components\TabelaLista.vue] para pegar a URL (que está em detalhe) e passar para 
         o componente [resources\assets\js\components\modal\ModalLink.vue] e neste componente vamos usar a o [method] [preencheFormulario] 
         para fazer uma requisição HTTP para o metodo [Show] do Controller e obter um objeto Artigo em seguida guardar ele na [store]

         - Alterando a utilização do [modallink] na [tabela-lista]

           (Estava Assim) 
           <modallink v-if="detalhe && modal" v-bind:item="item" tipo="link" nome="detalhe" titulo=" Detalhe |" css=""></modallink>
           
           (Agora Assim) 
           <modallink v-if="detalhe && modal" v-bind:item="item" v-bind:url="detalhe" tipo="link" nome="detalhe" titulo=" Detalhe |" css=""></modallink>

           Tenho que fazer isso em todos os [modallink] para detalhe

         - Alterando o componente [modallink] para incluir a [url] e mudar o [method] [preencheGormulario]
           Estamos fazendo uma requisição (GET) para a URL [/admin/artigos/] concatenada com o [id] do artigo esse (GET) vai achar o controller [ArtigoController]
           e vao executar o metodo [show] retornando em [then] o resultado [res] (que deve ser um objeto Artigo com todas as informações em seguinda [res.data]
           é armazenado na [store]

                  <script>
                      export default {
                        props:['tipo','nome','titulo','css','item','url'],
                        methods:{
                          preencheFormulario:function(){
                            axios.get(this.url + this.item.id).then(res => {
                              this.$store.commit('setItem',res.data);
                            })
                            //this.$store.commit('setItem',item);
                          }
                        }
                      }
                  </script>

    04 - Agora Vamos Voltar a view [resources\views\admin\artigos\index.blade.php] e modificar a tela [modal] de [detalhe] inserindo todos os
         dados que buscamos e que estão armazenados em [store]

           <modal nome="detalhe" v-bind:titulo="$store.state.item.titulo">
               <p>Id => @{{$store.state.item.id}}</p>
               <p>Titulo => @{{$store.state.item.titulo}}</p>
               <p>Descrição => @{{$store.state.item.descricao}}</p>
               <p>Conteúdo => @{{$store.state.item.conteudo}}</p>
               <p>Data => @{{$store.state.item.data}}</p>
               <p>Create => @{{$store.state.item.created_at}}</p>
               <p>Update => @{{$store.state.item.updateted_at}}</p>
               <p>Delete => @{{$store.state.item.deleted_at}}</p>
           </modal>


40) Editar Arquivos


    01 - Alterar a chamada ao componente [TabelaLista] colocando uma URL na opção de Edit. 
         Vamos alterar o Arquivo [resources\views\admin\artigos\index.blade.php]

            <tabela-lista
               v-bind:titulos="['#','Título','Descrição','Data']"
               v-bind:itens="{{$listaArtigos}}"
               ordem="desc" ordemcol="1"
               criar="#criar" detalhe="/admin/artigos/" editar="/admin/artigos/" deletar="#deletar" token="7887522323"
               modal="sim"

            ></tabela-lista>

    02 - Alterar o componente [resources\assets\js\components\TabelaLista.vue] para pegar a URL (que está em editar) e passar para 
         o componente [resources\assets\js\components\modal\ModalLink.vue]

         - Alterando a utilização do [modallink] na [tabela-lista]

           (Estava Assim) 
            <modallink v-if="editar && modal" v-bind:item="item" tipo="link" nome="editar" titulo=" Editar |" css=""></modallink>

           
           (Agora Assim) 
           <modallink v-if="editar && modal" v-bind:item="item" v-bind:url="editar" tipo="link" nome="editar" titulo=" Editar |" css=""></modallink>

           Tenho que fazer isso em todos os [modallink] para editar


    03 - Agora Vamos Voltar a view [resources\views\admin\artigos\index.blade.php] e modificar a tela [modal] de [editar] inserindo todos os
         dados que buscamos e que estão armazenados em [store]
         
           <modal nome="editar" titulo="Editar">
             <formulario id="formEditar" v-bind:action="'/admin/artigos/' + $store.state.item.id" method="put" enctype="" token="{{ csrf_token() }}">

               <div class="form-group">
                 <label for="titulo">Título</label>
                 <input type="text" class="form-control" id="titulo" name="titulo" v-model="$store.state.item.titulo" placeholder="Título">
               </div>
               <div class="form-group">
                 <label for="descricao">Descrição</label>
                 <input type="text" class="form-control" id="descricao" name="descricao" v-model="$store.state.item.descricao" placeholder="Descrição">
               </div>
               <div class="form-group">
                 <label for="conteudo">Conteúdo</label>
                 <textarea class="form-control" id="conteudo" name="conteudo" v-model="$store.state.item.conteudo" ></textarea>
               </div>

               <div class="form-group">
                 <label for="data">Data</label>
                 <input type="datetime-local" class="form-control" id="data" name="data" v-model="$store.state.item.data">
               </div>
             </formulario>
             <span slot="botoes">
               <button form="formEditar" class="btn btn-info">Atualizar</button>
             </span>
           </modal>


    04 - Por último vamos no controller [app\Http\Controllers\Admin\ArtigosController.php] e alterar o metodo [update]

           public function update(Request $request, $id)
           {
             $data = $request->all();
             $validacao = \Validator::make($data,[
               "titulo" => "required",
               "descricao" => "required",
               "conteudo" => "required",
               "data" => "required",
             ]);

             if($validacao->fails()){
               return redirect()->back()->withErrors($validacao)->withInput();
             }

             Artigo::find($id)->update($data);
             return redirect()->back();
           }

41) Deletar Artigo

    01 - Alterar controller [app\Http\Controllers\Admin\ArtigosController.php] o metodo [destroy]

          public function destroy($id)
          {
            Artigo::find($id)->delete();
            return redirect()->back();
          }

    02 - Alterar view [resources\views\admin\artigos\index.blade.php] colocando o link e o token para deletar

         <tabela-lista
            v-bind:titulos="['#','Título','Descrição','Data']"
            v-bind:itens="{{$listaArtigos}}"
            ordem="desc" ordemcol="1"
            criar="#criar" detalhe="/admin/artigos/" editar="/admin/artigos/" deletar="/admin/artigos/" token="{{ csrf_token() }}"
            modal="sim"

         ></tabela-lista>

    03 - Componente [] colocando o link no action 

            <tbody>
              <tr v-for="(item,index) in lista" :key=item.titulo>
                <td v-for="i in item" :key=i>{{i}}</td>

                <td v-if="detalhe || editar || deletar">
                  <form v-bind:id="index" v-if="deletar && token" v-bind:action="deletar + item.id" method="post">
                       <input type="hidden" name="_method" value="DELETE">
                       <input type="hidden" name="_token" v-bind:value="token">



42) Paginação com a Laravel
    - Para que as paginas possam ter paginação algumas modificações são necessárias

    01 - No controller [app\Http\Controllers\Admin\ArtigosController.php]
         Trocamos o metodo [get] pelo [paginate(2)] ou seja dois artigos por página. Tiramos também a rotina [json_encode]

    Antes 
                $listaArtigos = json_encode(Artigo::select('id', 'titulo', 'descricao', 'data')->get());
    Depois
                $listaArtigos = Artigo::select('id','titulo','descricao','data')->paginate(2);


    02 - Na view [resources\views\admin\artigos\index.blade.php]
         Colocamos o a rotina [json_encode] para manter a compatibilidade

    Antes 
               <tabela-lista
                  v-bind:titulos="['#','Título','Descrição','Data']"
                  v-bind:itens="{{$listaArtigos}}"
                  ordem="desc" ordemcol="1"
                  criar="#criar" detalhe="/admin/artigos/" editar="/admin/artigos/" deletar="/admin/artigos/" token="{{ csrf_token() }}"
                  modal="sim"

               ></tabela-lista>
    Depois
               <tabela-lista
                  v-bind:titulos="['#','Título','Descrição','Data']"
                  v-bind:itens="{{json_encode($listaArtigos)}}"         
                  ordem="desc" ordemcol="1"
                  criar="#criar" detalhe="/admin/artigos/" editar="/admin/artigos/" deletar="/admin/artigos/" token="{{ csrf_token() }}"
                  modal="sim"

               ></tabela-lista>

               <div align="center">     
                  {{$listaArtigos}}
               </div>
       - A Div acima é resposável por apresentar os links de Paginação. como [{{$listaArtigos}}] vem de um metodo [paginate] no controller então ele
         já apresenta a estrurura para montar uma paginação. Observe que ele deixou de ser [json]


    03 - No Componente [resources\assets\js\components\TabelaLista.vue]

            computed:{
              lista:function(){

                let lista = this.itens.data;

         Para pegar os dados da Lista agora usamos o this.itens.data (já que não é mais um [json]) então deste pto para baixo em todo lugar que 
         aparecer dentro da rotina [this.itens] trocaremos para [lista]


43) CRUD de Usuários
    - Basicamente uma copia do Controller de Artigos e da View (index) também de arquivos. (Detalhes na próxima aula: 44) 
    - Vou criar o controller de Usuarios assim [php artisan make:controller Admin/UsuariosController --resource]
    - Depois copiar os metodos de [app\Http\Controllers\Admin\ArtigosController.php] para [app\Http\Controllers\Admin\UsuariosController.php]
    - Depois criar uma pasta [usuarios] dentro de [resources\views\admin] e nessa pasta colocar a view [resources\views\admin\usuarios\index.blade.php]
    - Alterar a view para trabalhar com os campos de [Usuario] e não de [Artigos]
    - IMPORTANTE: Alterar o arquivo [routes\web.php] para colocar a [Rota] [Route::resource('usuarios', 'UsuariosController');]
    - IMPORTANTE: Alterar o arquivo [resources\views\home.blade.php] para colocar o Link de [Usuarios]
        <div class="col-md-4">
          <caixa qtd="1500" titulo="Usuários" url="{{route('usuarios.index')}}" cor="blue" icone="ion ion-person-stalker"></caixa>
        </div>
      


44) Problema do Único E-mail no Editar
    - Abaixo está o [app\Http\Controllers\Admin\UsuariosController.php]

         <?php

         namespace App\Http\Controllers\Admin;

         use Illuminate\Http\Request;
         use App\Http\Controllers\Controller;
         use App\User;
         use Illuminate\Validation\Rule;

         class UsuariosController extends Controller
         {
             /**
              * Display a listing of the resource.
              *
              * @return \Illuminate\Http\Response
              */
             public function index()
             {
               $listaMigalhas = json_encode([
                 ["titulo"=>"Home","url"=>route('home')],
                 ["titulo"=>"Lista de Usuários","url"=>""]
               ]);

               $listaModelo = User::select('id','name','email','password')->paginate(2);


               return view('admin.usuarios.index',compact('listaMigalhas','listaModelo'));
             }

             /**
              * Show the form for creating a new resource.
              *
              * @return \Illuminate\Http\Response
              */
             public function create()
             {
                 //
             }

             /**
              * Store a newly created resource in storage.
              *
              * @param  \Illuminate\Http\Request  $request
              * @return \Illuminate\Http\Response
              */
             public function store(Request $request)
             {
               $data = $request->all();
               $validacao = \Validator::make($data,[
                 'name' => 'required|string|max:255',
                 'email' => 'required|string|email|max:255|unique:users',
                 'password' => 'required|string|min:6',
               ]);

               if($validacao->fails()){
                 return redirect()->back()->withErrors($validacao)->withInput();
               }

               $data['password'] = bcrypt($data['password']);

               User::create($data);
               return redirect()->back();
             }

             /**
              * Display the specified resource.
              *
              * @param  int  $id
              * @return \Illuminate\Http\Response
              */
             public function show($id)
             {
                 return User::find($id);
             }

             /**
              * Show the form for editing the specified resource.
              *
              * @param  int  $id
              * @return \Illuminate\Http\Response
              */
             public function edit($id)
             {
                 //
             }

             /**
              * Update the specified resource in storage.
              *
              * @param  \Illuminate\Http\Request  $request
              * @param  int  $id
              * @return \Illuminate\Http\Response
              */
             public function update(Request $request, $id)
             {
               $data = $request->all();

               if(isset($data['password']) && $data['password'] != ""){
                 $validacao = \Validator::make($data,[
                   'name' => 'required|string|max:255',
                   'email' => ['required','string','email','max:255',Rule::unique('users')->ignore($id)],
                   'password' => 'required|string|min:6',
                 ]);
                 $data['password'] = bcrypt($data['password']);
               }else{
                 $validacao = \Validator::make($data,[
                   'name' => 'required|string|max:255',
                   'email' => ['required','string','email','max:255',Rule::unique('users')->ignore($id)]
                 ]);
                 unset($data['password']);
               }



               if($validacao->fails()){
                 return redirect()->back()->withErrors($validacao)->withInput();
               }

               User::find($id)->update($data);
               return redirect()->back();
             }

             /**
              * Remove the specified resource from storage.
              *
              * @param  int  $id
              * @return \Illuminate\Http\Response
              */
             public function destroy($id)
             {
               User::find($id)->delete();
               return redirect()->back();
             }
         }

    - Abaixo está o [resources\views\admin\usuarios\index.blade.php]

         @extends('layouts.app')

         @section('content')
           <pagina tamanho="12">

             @if($errors->all())
               <div class="alert alert-danger alert-dismissible text-center" role="alert">
                 <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                 @foreach ($errors->all() as $key => $value)
                   <li><strong>{{$value}}</strong></li>
                 @endforeach
               </div>
             @endif

             <painel titulo="Lista de Usuários">
               <migalhas v-bind:lista="{{$listaMigalhas}}"></migalhas>


               <tabela-lista
               v-bind:titulos="['#','Nome','E-mail']"
               v-bind:itens="{{json_encode($listaModelo)}}"
               ordem="desc" ordemcol="1"
               criar="#criar" detalhe="/admin/usuarios/" editar="/admin/usuarios/" deletar="/admin/usuarios/" token="{{ csrf_token() }}"
               modal="sim"

               ></tabela-lista>
               <div align="center">
                 {{$listaModelo}}
               </div>
             </painel>

           </pagina>

           <modal nome="adicionar" titulo="Adicionar">
             <formulario id="formAdicionar" css="" action="{{route('usuarios.store')}}" method="post" enctype="" token="{{ csrf_token() }}">

               <div class="form-group">
                 <label for="name">Nome</label>
                 <input type="text" class="form-control" id="name" name="name" placeholder="Nome" value="{{old('name')}}">
               </div>
               <div class="form-group">
                 <label for="email">E-mail</label>
                 <input type="email" class="form-control" id="email" name="email" placeholder="E-mail" value="{{old('email')}}">
               </div>

               <div class="form-group">
                 <label for="password">Senha</label>
                 <input type="password" class="form-control" id="password" name="password" value="{{old('password')}}">
               </div>

             </formulario>
             <span slot="botoes">
               <button form="formAdicionar" class="btn btn-info">Adicionar</button>
             </span>

           </modal>
           <modal nome="editar" titulo="Editar">
             <formulario id="formEditar" v-bind:action="'/admin/usuarios/' + $store.state.item.id" method="put" enctype="" token="{{ csrf_token() }}">

               <div class="form-group">
                 <label for="name">Nome</label>
                 <input type="text" class="form-control" id="name" name="name" v-model="$store.state.item.name" placeholder="Nome">
               </div>
               <div class="form-group">
                 <label for="email">E-mail</label>
                 <input type="email" class="form-control" id="email" name="email" v-model="$store.state.item.email" placeholder="E-mail">
               </div>
               <div class="form-group">
                 <label for="password">Senha</label>
                 <input type="password" class="form-control" id="password" name="password" >
               </div>
             </formulario>
             <span slot="botoes">
               <button form="formEditar" class="btn btn-info">Atualizar</button>
             </span>
           </modal>
           <modal nome="detalhe" v-bind:titulo="$store.state.item.name">
             <p>@{{$store.state.item.id}}</p>
             <p>@{{$store.state.item.name}}</p>
             <p>@{{$store.state.item.email}}</p>
             <p>Password</p>
             <p>@{{$store.state.item.password}}</p>
             <p>Fim - Password</p>
           </modal>
         @endsection

45) Adicionando o Atributo Autor na Tabela de Users
    - Para realizar modificações nas tabelas devemos criar um arquivo de migração com o comando [php artisan make:migration add_autor_table_users --table=users]
      Onde [add_autor_table_users] é um nome que escolhemos para amigração.
    - Foi criado o arquivo [database\migrations\2020_10_07_120139_add_autor_table_users.php]
      onde alterei apenas as linhas de criação e drop da coluna [autor]

         <?php

         use Illuminate\Support\Facades\Schema;
         use Illuminate\Database\Schema\Blueprint;
         use Illuminate\Database\Migrations\Migration;

         class AddAutorTableUsers extends Migration
         {
             /**
              * Run the migrations.
              *
              * @return void
              */
             public function up()
             {
                 Schema::table('users', function (Blueprint $table) {
                     $table->enum('autor','['N','S']')->default('N');
                 });
             }

             /**
              * Reverse the migrations.
              *
              * @return void
              */
             public function down()
             {
                 Schema::table('users', function (Blueprint $table) {
                     $table->dropColumn('autor');
                 });
             }
         }

    - Antes de rodar a migração podemos ver o status das migrações com o comando [php artisan migrate:status]
      Ele vai mostra uma tabela com todas as migrações informando qual a que já rodou e qual a que não rodou.
    - Para rodar basta [php artisan migrate]


46) Preparando o CRUD de Autores 
    - Na verdade esse CRUD vai acessar a tabela de Usuarios apenas para gerenciar os usuários que estão com autor = 'S'. Não vai ter [Delete]
    - Vamos ter que modificar a funcionalidade de [usuarios] para permitir criar um usuario e informar que ele é autor e também para editar
      colocando autor = 'S' ou 'N'.

    - Basicamente uma copia do Controller de Artigos e da View (index) também de arquivos. (Detalhes na próxima aula: 47) 
    - Vou criar o controller de Autores assim [php artisan make:controller Admin/AutoresController --resource]
    - Depois copiar os metodos de [app\Http\Controllers\Admin\ArtigosController.php] para [app\Http\Controllers\Admin\AutoresController.php]
    - Depois criar uma pasta [autores] dentro de [resources\views\admin] e nessa pasta colocar a view [resources\views\admin\autores\index.blade.php]
    - Alterar a view para trabalhar com os campos de [Usuario]
    - IMPORTANTE: Alterar o arquivo [routes\web.php] para colocar a [Rota] [Route::resource('autores', 'AutoresController');]
    - IMPORTANTE: Alterar o arquivo [resources\views\home.blade.php] para colocar o Link de [Autores]
        <div class="col-md-4">
          <caixa qtd="1500" titulo="Autores" url="{{route('autores.index')}}" cor="blue" icone="ion ion-person-stalker"></caixa>
        </div>

47) Finalizando o CRUD de Autores
    - Veja os Controllers de Usuarios e Autores e Veja também a as views de Usuarios e Autores

48) Desafio para Praticar
    - Pegar o Total de Artigos, Usuarios e Autores e colocar nas Caixas da Tela Home. Veja o Controller Home [app\Http\Controllers\HomeController.php] e
      a view da tela principal [resources\views\home.blade.php]


49) Id de Usuário na Tabela de Artigos
    - Basta criar uma migração [php artisan make:migration add_id_user_table_artigos] Não colocar --table=nome-da-tabela implica em colocar a linha
      [Schema::table('artigos', function (Blueprint $table) {] nos metódos [up] e [down].
      Foi criado o arquivo [database\migrations\2020_10_08_100047_add_id_user_table_artigos.php] 
      Para ver o status [php artisan migrate:status] e para rodar [php artisan migrate]

50) Definindo o Relacionamento de Artigo com Usuário
    - Fazendo alterações no Modelo Artigo [app\Artigo.php] e no Modelo Usuário [app\User.php]

    - Em [app\Artigo.php] colocamos o metodo abaixo. Isso é possivel pq na tabela ja construimos os relacionamentos (via foreign Key e os nomes usados para
      os campos já estão no padrão do Laravel)

      Um Artigo pertence a Um Usuario
          public function user () {
            return $this->belongsTo('App\User');
          }


    - Em [app\User.php] colocamos o metodo abaixo.
      Um Usuário pode Possuir vários Artigos (não preciso definir qual o campo em [hasMany] pq já estou usando o padrão laravel

          public function artigos () {
            return $this->hasMany('App\Artigo');
          }

    - Em [app\Http\Controllers\Admin\ArtigosController.php] colocamos a linha abaixo
            $listaArtigos = Artigo::select('id','titulo','descricao','user_id','data')->paginate(5);

    - Em [resources\views\admin\artigos\index.blade.php] colocamos a linha abaixo
         v-bind:titulos="['#','Título','Descrição','Autor','Data']" 
      Apesar de [Autor] mostrar apenas o [user_id] 


51) Exibir o Nome do Autor na Lista de Artigos
    - Temos duas formas de buscar o nome do autor através do user_id em artigos. Todas são programadas no arquivo [app\Http\Controllers\Admin\ArtigosController.php]

    - Na Primeira opção buscamos normalmente os artigos (como ja estava sendo feito) e em seguida percorremos a lista trocando  o conteudo de user_id (na lista)
      pelo nome do Autor (usuário) Observe que ao fazer [\App\User] estamos tendo acesso ao Modelo [User] sem precisar adicionar um [use] no inicio do arquivo.
      Usamos o metodo [static] find para buscar um [Usuario] e do usuario pegamos apenas o [name]

        $listaArtigos = Artigo::select('id','titulo','descricao','user_id','data')->paginate(5);

        foreach ($listaArtigos as $key => $value) {
          $value->user_id = \App\User::find($value->user_id)->name;
        }

    - Na Segunda opção (que parece ser a melhor opção) usamos o Banco de Dados para já trazer a Lista como desejamos (fazer um inner join entre [Artigos] e [Users])
      Atenção: ao filtro [whereNull('deleted_at')] pois não desejamos trazer registros deletados (aqueles onde [deleted_at] não é null)
 

        $listaArtigos = DB::table('artigos')
                        ->join('users','users.id','=','artigos.user_id')
                        ->select('artigos.id','artigos.titulo','artigos.descricao','users.name','artigos.data')
                        ->whereNull('deleted_at')
                        ->paginate(5);



52) Passando a Logica para o Modelo de Artigos
    - Para organizar o código e evitar que o comando acima (51) seja repetido toda vez. Colocamos o codigo acima no [Model] [Artigo]

          public static function listaArtigos($paginate)
              {
                /*
                $listaArtigos = Artigo::select('id','titulo','descricao','user_id','data')->paginate($paginate);

                foreach ($listaArtigos as $key => $value) {
                  $value->user_id = User::find($value->user_id)->name;
                }
                */

                $listaArtigos = DB::table('artigos')
                                ->join('users','users.id','=','artigos.user_id')
                                ->select('artigos.id','artigos.titulo','artigos.descricao','users.name','artigos.data')
                                ->whereNull('deleted_at')
                                ->paginate($paginate);
                return $listaArtigos;
              }

    - E no ArtigoController fizemos a chamada.
             $listaArtigos = Artigo::listaArtigos(5);

53) CKEditor com Vue JS
    - CKEditor é um componente que apresenta uma janela para edição de texto (textArea) com algumas propriedades como [Bold],[Italico] e outros que vemos no Word.
    - Este componente já existe e esta no [Git]
    - Local onde se encontra o componente [https://github.com/dangvanthanh/vue-ckeditor2]
    - Dicas de como usá-lo [https://github.com/dangvanthanh/vue-ckeditor2/wiki/Getting-Started]
    - Como instalar [npm install vue-ckeditor2 --save]

    - Atenção: Durante a instalação do CKEditor (logo no 01) deu erro no [node-sass] e depois de várias pesquisas, tentativas e muita perda de tempo conseguimos
      com o comando abaixo.
         [npm uninstall node-sass && npm install node-sass]

    01 - Instalar [npm install vue-ckeditor2 --save]
    02 - Colocar o import do javascript que contém o componente na nossa aplicação. Então vamos no arquivo [resources\views\layouts\app.blade.php]
         e colocamos lá [<script src="//cdn.ckeditor.com/4.6.2/full/ckeditor.js"></script>]
    03 - Agora vamos importar ele como componente (como todos que já fizemos) só que esse componente é externo, não está na pastas de componente criados na app.
         Vamos no arquivo [resources\assets\js\app.js] e colocamos [Vue.component('ckeditor', require('vue-ckeditor2'));]
    04 - Já podemos usar o componente, vamos na view [resources\views\admin\artigos\index.blade.php] e vamos substituir
         [<textarea class="form-control" id="conteudo" name="conteudo" >{{old('conteudo')}}</textarea>]

         Por (este está na parte do adicionar)
         
           <ckeditor
             id="addConteudo"
             name="conteudo"
             value="{{old('conteudo')}}"
             v-bind:config="{
                       toolbar: [
                         [ 'Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript' ]
                       ],
                       height: 200
                     }" >
           </ckeditor>


         Este está na parte do editar
   
           <ckeditor
             id="editConteudo"
             name="conteudo"
             v-model="$store.state.item.conteudo"
             v-bind:config="{
                       toolbar: [
                         [ 'Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript' ]
                       ],
                       height: 200
                     }" >
           </ckeditor>

54) Preparando a Página do Blog

    - Ajeitando a Tela Principal. Na tela do [http://localhost:8000/] vamos mudar algumas coisas. E Nossa tela [http://localhost:8000/home] Vai ser
      [http://localhost:8000/admin]
    01 - Trocando a rota. Vamos em 




55) Criando o Componente Topo
56) Criando o Componente Topo
57) Criando o Componente Topo
58) Criando o Componente Topo
59) Criando o Componente Topo
